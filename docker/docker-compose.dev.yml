version: '3.7'

services:

  # Catroweb Project using APACHE with PHP
  app.catroweb:
    build:
      args:
        - APP_ENVIRONMENT=dev
      context: ../
      dockerfile: docker/Dockerfile
    container_name: app.catroweb
    image: app.catroweb
    command: ["sh", "/var/www/catroweb/docker/app/startup.sh"]
    depends_on:
      - db.catroweb.dev
      - db.catroweb.test
      - chrome.catroweb
      - elasticsearch
    ports:
      - 8080:80
    volumes:
      #
      # Changes to the following files are shared between host and container.
      # Which means changes to those files are synced between the host and container. No rebuild needed!
      #
      # Make sure the content of the following dirs/files is not changed in the Dockerfile, else the changes will just
      # be discarded. Otherwise feel free to add every file that is modified regularly.
      #
      - ./../assets:/var/www/catroweb/assets:cached
      #
      # bin: We can't share the bin folder since most files(symlinks) are generated during the build process.
      #      If needed, shared files have to be explicitly defined:
      - ./../bin/checkCatroidRepositoryForNewBricks:/var/www/catroweb/bin/checkCatroidRepositoryForNewBricks:cached
      - ./../bin/console:/var/www/catroweb/bin/console:cached
      - ./../bin/x_perm.sh:/var/www/catroweb/bin/x_perm.sh:cached
      - ./../bin/x_reset.sh:/var/www/catroweb/bin/x_reset.sh:cached
      - ./../bin/x_test.sh:/var/www/catroweb/bin/x_test.sh:cached
      #
      #
      - ./../config:/var/www/catroweb/config:cached
      - ./../migrations:/var/www/catroweb/migrations:cached
      - ./../docker:/var/www/catroweb/docker:cached
      #
      # public: contains mainly generated files - no need to pollute the host with such files
      #         If needed, shared files should be explicitly defined:
      - ./../public/index.php:/var/www/catroweb/public/index.php:cached
      - ./../public/index_test.php:/var/www/catroweb/public/index_test.php:cached
      #
      - ./../src:/var/www/catroweb/src:cached
      - ./../templates:/var/www/catroweb/templates:cached
      - ./../tests:/var/www/catroweb/tests:cached
      - ./../translations:/var/www/catroweb/translations:cached
      #
      # 3rd party Libraries: vendor + node_modules:
      #
      #  Since we need access to the vendor & node_modules in the Dockerfile, we can not share them.
      #  Shared volumes are attached after the build process, which will result in else invalid overwritten
      #  libraries in the container.
      #
      #  If you need access to them (for example fohear IntelliSense):
      #
      #    - Option 1: Copy those directories from the container to the host. E.g with
      #                docker cp app.catroweb:/var/www/catroweb/vendor vendor`
      #                docker cp app.catroweb:/var/www/catroweb/node_modules node_modules `
      #
      #        In case of errors (windows) you could tar the directory before copying it from the container to the host.
      #        A script doing exactly this can be found in `docker/app/import-container-libraries.sh`
      #
      #   - Option 2: Install Php and node.js locally.
      #               Then just run composer install and npm install locally.
      #
      #        This option might be a bit redundant, but it also comes with benefits like locally installing
      #        new libraries. Especially installing node_modules in the container can be problematic (on windows).
      #        Sharing package(-lock)?.json is not possible (on windows) due to file locks. There for the package files
      #        must be copied out of the container manually after every npm install.
      #        The drawback - using a wrong node / php version may result in errors or missing functionality
      #
      #
      # most root files that can be shared can be defined here:
      - ./../.env:/var/www/catroweb/.env
      - ./../.env.dev:/var/www/catroweb/.env.dev
      - ./../.env.test:/var/www/catroweb/.env.test
      - ./../.env.prod:/var/www/catroweb/.env.prod
      - ./../deploy.php:/var/www/catroweb/deploy.php
      - ./../Gruntfile.js:/var/www/catroweb/Gruntfile.js
      - ./../composer.json:/var/www/catroweb/composer.json
      - ./../composer.lock:/var/www/catroweb/composer.lock
      - ./../symfony.lock:/var/www/catroweb/symfony.lock

      # Sharing npm package files is not working (at least on windows) - feel free to try it out on any other OS
#      - ./../package.json:/var/www/catroweb/package.json
#      - ./../package-lock.json:/var/www/catroweb/package-lock.json

  db.catroweb.dev:
    image: mariadb:10.3.11
    container_name: db.catroweb.dev
    ports:
      - 3306
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=catroweb_dev


  # --- Tests:

  chrome.catroweb:
    image: zenika/alpine-chrome:81
    container_name: chrome.catroweb
    restart: on-failure
    volumes:
      - ./../tests/testdata/DataFixtures:/var/www/catroweb/tests/testdata/DataFixtures:ro
      - ./../tests/testdata/UploadDownloadTemp:/var/www/catroweb/tests/testdata/UploadDownloadTemp
    command: ["chromium-browser", "--headless", "--disable-gpu", "--remote-debugging-address=0.0.0.0", "--remote-debugging-port=9222", "--disable-extensions", "--disable-dev-shm-usage", "--disable-software-rasterizer", "--no-sandbox"]
    ports:
      - 9222

  db.catroweb.test:
    image: mariadb:10.3.11
    container_name: db.catroweb.test
    ports:
      - 3306
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=catroweb_test


  # --- Tools:

  phpmyadmin.catroweb.dev:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin.catroweb.dev
    environment:
      - PMA_ARBITRARY=1
    restart: always
    ports:
      - 8081:80
    volumes:
      - /sessions
    external_links:
      - db.catroweb.dev:db
      - db.catroweb.test:db
    depends_on:
      - db.catroweb.dev
      - db.catroweb.test


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.9
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - transport.host=localhost
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

volumes:
  esdata1:
    driver: local
