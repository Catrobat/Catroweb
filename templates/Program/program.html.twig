{% extends 'Default/base.html.twig' %}

{% block head %}
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/program.css') }}"/>
  <link rel="stylesheet" href="{{ asset('css/plugins/jquery.contextMenu.min.css') }}"/>
  <link rel="stylesheet" href="{{ asset('css/plugins/vis.min.css') }}"/>
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/remixgraph.css') }}"/>
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/loadinganimation.css') }}"/>
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css"/>

  <script src=" {{ asset( getJavascriptPath('LoadingAnimation.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('jquery.contextMenu.min.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('jquery.ui.position.min.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('animatedModal.min.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('vis.min.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('clipboard.min.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('remixgraph.configuration.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('remixgraph.builder.js') ) }}"></script>
  <script src=" {{ asset( getJavascriptPath('remixgraph.visualization.js') ) }}"></script>

  <meta property="og:image" content="{{ asset(program_details.screenshotBig) }}"/>
  <meta property="og:type" content="website"/>
  <meta property="og:image:secure_url" content="{{ asset(program_details.screenshotBig) }}"/>
  <meta property="og:title" content="{{ program.name|escape('html_attr') }}"/>
  {% if program.description is empty %}
    <meta property="og:description"
          content="{{ "programs.checkout_this_program"|trans({}, "catroweb") }}"/>
  {% else %}
    <meta property="og:description" content="{{ program.description|escape('html_attr') }}"/>
  {% endif %}
  <meta property="og:url" content="{{ url('program', {id: program.id}) }}"/>
{% endblock %}

{% block body %}

  <div id="program-top" class="h1">
    <div id="program-name" class="headline">
      {{ program.name }}
    </div>
    <div class="clear"></div>
  </div>

  <div id="program-middle">
    <div id="image" class="image-container">

      {% include 'Program/projectThumbnail.html.twig' %}

      <div id="program-like-container">
        <div>
          <div id="program-like-buttons-container">
            <a id="program-like-thumbs-up" class="program-like-button" href="#"
               data-like-type="{{ constant('App\\Entity\\ProgramLike::TYPE_THUMBS_UP') }}"
               data-toggle="tooltip" title="{{ 'programs.thumbsUp'|trans({}, 'catroweb') }}">
              <div class="like-round-icon-container mr-3"><i
                    class="like-round-icon fas fa-thumbs-up"></i></div>
              <span
                  class="singular">{{ "programs.likeThumbsUpDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span
                  class="plural">{{ "programs.likeThumbsUpDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-smile" class="program-like-button" href="#"
               data-like-type="{{ constant('App\\Entity\\ProgramLike::TYPE_SMILE') }}"
               data-toggle="tooltip" title="{{ 'programs.smile'|trans({}, 'catroweb') }}">
              <i class="like-icon mr-3 fas fa-grin-squint"></i>
              <span
                  class="singular">{{ "programs.likeSmileDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span
                  class="plural">{{ "programs.likeSmileDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-love" class="program-like-button" href="#"
               data-like-type="{{ constant('App\\Entity\\ProgramLike::TYPE_LOVE') }}"
               data-toggle="tooltip" title="{{ 'programs.love'|trans({}, 'catroweb') }}">
              <div class="like-round-icon-container mr-3"><i
                    class="like-round-icon-heart fas fa-heart"></i></div>
              <span
                  class="singular">{{ "programs.likeLoveDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span
                  class="plural">{{ "programs.likeLoveDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-wow" class="program-like-button" href="#"
               data-like-type="{{ constant('App\\Entity\\ProgramLike::TYPE_WOW') }}"
               data-toggle="tooltip" title="{{ 'programs.wow'|trans({}, 'catroweb') }}">
              <i class="like-icon mr-3 fas fa-surprise"></i>
              <span
                  class="singular">{{ "programs.likeWowDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span
                  class="plural">{{ "programs.likeWowDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <span id="program-like-counter" class="program-like-counter"></span>
          </div>
        </div>
        <div id="program-like-detail-container">&nbsp;</div>
      </div>
    </div>

    <div id="info">
      <div class="h2 headline" id="description-headline">
        <span>
          {{ "description"|trans({}, "catroweb") }}
          {% if app.user and my_program %}
            <a data-toggle="tooltip" title="{{ 'programs.editDescription'|trans({}, 'catroweb') }}">
              <i id="edit-description-button"
                 class="ml-3 far fa-edit catro-icon-button"></i>
            </a>
          {% endif %}
        </span>
      </div>

      <div id="description" style="max-height: 300px; overflow: auto;">
        {% if program.description %}
          {% if program.description|length <= 250 %}
            {{ program.description|nl2br }}
          {% else %}
            <p>
              <span>{{ program.description[:250]|nl2br }}</span><!--- NO white space hack
                  --><span id="descriptionPoints">...</span><!--- NO white space hack
                  --><span id="descriptionFulltext"
                           class="fulltext">{{ program.description[250:]|nl2br }}</span>
            </p>
            <a id="descriptionShowMoreToggle" aria-expanded="false"
               aria-controls="descriptionFulltext" href="#"
               class="toggle-content">
                  <span id="descriptionShowMoreText" class="text text-capitalize">
                    {{ ("show-more")|trans({}, "catroweb") }}
                  </span>
            </a>
          {% endif %}
        {% else %}
          {{ "noDescription"|trans({}, "catroweb") }}
        {% endif %}
      </div>


      {% if app.user and my_program %}
        <div id="edit-description-ui">
          <div id="edit-description-error" style="display:none;" class="alert alert-danger"></div>
          <textarea id="edit-description" name="edit-description" class="mt-2 mb-2"
                    title="_edit-description"
                    maxlength="{{ max_description_size }}" style="width: 100%" rows="10">
{% if program.description %}{{ program.description }}{% else %}{{ "noDescription"|trans({}, "catroweb") }}{% endif %}
          </textarea>

          <button id="edit-description-submit-button" class="btn btn-primary p-3 mb-5">
            <i class="fa fa-floppy-o mr-2"></i>
            {{ 'programs.saveDescription'|trans({}, 'catroweb') }}
          </button>
        </div>
      {% endif %}

      <hr>

      <div class="h2 headline" id="credits-headline">
        <span>
          {{ "credits"|trans({}, "catroweb") }}
          {% if app.user and my_program %}
            <a data-toggle="tooltip" title="{{ 'programs.editCredits'|trans({}, 'catroweb') }}">
              <i id="edit-credits-button"
                 class="ml-3 far fa-edit catro-icon-button"></i>
            </a>
          {% endif %}
        </span>
      </div>

      <div id="credits" style="max-height: 300px; overflow: auto;">
        {% if program.credits %}
          {% if program.credits|length <= 250 %}
            {{ program.credits|nl2br }}
          {% else %}
            <p>
              <span>{{ program.credits[:250]|nl2br }}</span><!--- NO white space hack
                --><span id="creditsPoints">...</span><!--- NO white space hack
                --><span id="creditsFulltext"
                           class="fulltext">{{ program.credits[250:]|nl2br }}</span>
            </p>
            <a id="creditsShowMoreToggle" aria-expanded="false"
               aria-controls="creditsFulltext" href="#"
               class="toggle-content">
              <span id="creditsShowMoreText" class="text text-capitalize">
                {{ ("show-more")|trans({}, "catroweb") }}
              </span>
            </a>
          {% endif %}
        {% else %}
          {{ "noCredits"|trans({}, "catroweb") }}
        {% endif %}
      </div>


        {% if app.user and my_program %}
          <div id="edit-credits-ui">
            <div id="edit-credits-error" style="display:none;" class="alert alert-danger"></div>
            <textarea id="edit-credits" name="edit-credits" class="mt-2 mb-2"
                      title="_edit-credits"
                      maxlength="{{ max_description_size }}" style="width: 100%" rows="10">
{% if program.credits %}{{ program.credits }}{% else %}{{ "noCredits"|trans({}, "catroweb") }}{% endif %}
          </textarea>

            <button id="edit-credits-submit-button" class="btn btn-primary p-3 mb-5">
              <i class="fa fa-floppy-o mr-2"></i>
              {{ 'programs.saveCredits'|trans({}, 'catroweb') }}
            </button>
          </div>
        {% endif %}
        <hr>



      {% if  program.tags|length > 0  or program.extensions|length > 0 %}
        <div id="tag-extension-container">

          {% if program.extensions|length > 0 %}
            <div id="extensions">
              <p>{{ ("extenstion-text")|trans({}, "catroweb") }}:</p>
              <div class="list">
                {% for extension in program.extensions %}
                  <a class="rec-programs badge badge-primary"
                     href="{{ url('extension_search', { q : extension.name }) }}">{{ extension.name }}</a>
                {% endfor %}
              </div>
            </div>
          {% endif %}

          {% if  program.tags|length > 0 %}
            <div id="tags">
              <p>{{ ("tag-text")|trans({}, "catroweb") }}:</p>
              <div class="list">
                {% for tag in program.tags %}
                  <a class="rec-programs badge badge-primary"
                     href="{{ url('tag_search', { q : tag.id }) }}">{{ ("tags.constant.tag"~tag.id)|trans({}, "catroweb") }}</a>
                {% endfor %}
              </div>
            </div>
          {% endif %}

        </div>
      {% endif %}

      <div class="download-container">
        <div class="btn-container col-12 col-xl-6">
          <a id="url-download" class="btn btn-primary button"
             href="{% if (checkCatrobatLanguage(program_details.languageVersion)) %}{{ program_details.downloadUrl }}{% else %}javascript:program.showUpdateAppPopup();{% endif %}">
            <img class="program-big-button-icon mr-3" src="{{ asset('images/symbols/download.svg') }}" alt=""/>
            <span>{{ "download"|trans({}, "catroweb") }}</span>
          </a>
        </div>


        <div id="remix-graph-button" class="btn-container col-12 col-xl-6">
          <button class="btn btn-primary">
            <i class="program-big-button-icon mr-3 fa fa-sitemap"></i>
            <span>{{ "remixGraph.showRemixGraph"|trans({}, "catroweb") }}</span>
          </button>
        </div>

        {% if not isIOSWebview() %}
        <div id="apk-generate" class="btn-container col-12 col-xl-6">
          <button class="btn btn-primary">
            <i class="program-big-button-icon mr-3 fab fa-android"></i>
            <span>{{ "apk.prepare"|trans({}, "catroweb") }}</span>
          </button>
        </div>

        <div id="apk-pending" class="btn-container col-12 col-xl-6 d-none">
          <button class="btn btn-primary">
            <i class="program-big-button-icon mr-3 fa fa-spinner fa-pulse fa-2x fa-fw"
               aria-hidden="true"></i>
            <span>{{ "apk.preparing"|trans({}, "catroweb") }}</span>
          </button>
        </div>

        <div id="apk-download" class="btn-container col-12 col-xl-6 d-none">
          <button class="btn btn-primary">
            <i class="program-big-button-icon mr-3 fab fa-android"></i>
            <span>{{ "apk.download"|trans({}, "catroweb") }}</span>
          </button>
        </div>
      </div>
      {% endif %}

      {% if not program.gamejam or not program.acceptedforgamejam %}
        {% if jam %}
          <div id="gamejam-div">
            <a href="{% if app.user %} {{ url('gamejam_web_submit', { "id": program.id }) }}{% else %}{{ url('login') }}{% endif %}"
               title="{{ jam.name }}">
              <button id="gamejam-submission" class="btn btn-jam download-button">
                <table>
                  <tr>
                    <td><img src="{{ asset( jam.logo_url ) }}"></td>
                    <td>{{ "gamejam.submit"|trans({ '%gamejamname%' : jam.name}, "catroweb") }}</td>
                  </tr>
                </table>
              </button>
            </a>
          </div>
          <div id="gamejam-whats">
            <a href="{{ jam.gamejam_url }}">{{ "gamejam.whats"|trans({ '%gamejamname%' : jam.name}, "catroweb") }}</a>
          </div>
        {% endif %}
      {% endif %}
      <div class="clear"></div>
      <button type="button" class="btn btn-lg btn-link btn-copy"
              data-clipboard-text="{{ url('program', { id : program.id }) }}"
              style="text-shadow: none;">
        <span class="fa fa-link" aria-hidden="true"></span>
        {{ "programs.linkTitle"|trans({}, "catroweb") }}
      </button>

      {% if not my_program %}
        <button type="button" class="btn btn-lg btn-link" style="text-shadow: none;"
                id="report-program-button">
          <i class="fas fa-ban mr-1"></i>
          {{ "programs.reportProgram"|trans({}, 'catroweb') }}
        </button>
      {% endif %}
    </div>

    <div class="clear"></div>
  </div>

  {#
     # CODEVIEW
   #}
  {% if program_details.languageVersion >= 0.97 %}
    {{ render(controller('App\\Catrobat\\Controller\\Web\\CodeViewController:viewCodeAction', {'id' : program.id})) }}
  {% endif %}

  <div id="program-bottom">
    <div id="program-bottom-container">
      <div id="icon-author">
        <div class="program-round-icon-container"><i class="program-round-icon fas fa-user"></i></div>
        <a href="{{ url('profile', { id : program.user.id }) }}"
           class="icon-text">{{ program.user }}</a>
      </div>
      <div>
        <div class="program-round-icon-container"><i class="program-round-icon far fa-clock"></i>
        </div>
        <span class="icon-text">{{ program_details.age }}</span>
      </div>
      <div>
        <div class="program-round-icon-container"><i class="program-round-icon fas fa-file-alt"></i>
        </div>
        <span class="icon-text">{{ program_details.filesize }} MB</span>
      </div>
      <div>
        <div class="program-round-icon-container"><i class="program-round-icon fas fa-download"></i>
        </div>
        <span
            class="icon-text">{{ "programs.downloads"|trans({ '%downloads%' : program_details.downloads }, "catroweb") }}
        </span>
      </div>
      <div>
        <div class="program-round-icon-container"><i class="program-round-icon fas fa-eye"></i></div>
        <span
            class="icon-text">{{ "programs.views"|trans({ '%views%' : program_details.views }, "catroweb") }}</span>
      </div>
      <div>
        <div class="program-round-icon-container"><i class="program-round-icon fas fa-sitemap"></i>
        </div>
        <a id="remix-graph-modal-link" href="#remix-graph-modal" class="icon-text">
          {{ "programs.remixes"|transchoice(program_details.remixesLength,
            { '%remixes%' : program_details.remixesLength }, "catroweb") }}
        </a>
      </div>
    </div>
  </div>

  <div id="remix-graph-modal">
    <div class="close-remix-graph-modal">
      <i class="fas fa-times-circle catro-icon-button remix-close-icon"></i>
    </div>
    <div id="remix-graph-layer" class="modal-content"></div>
  </div>

  {% if  program.tags|length > 0  or program.extensions|length > 0 %}
    <div id="recommendations">
      <div id="recsys-headline" class="headline">
        <h2>{{ 'recommender.similarPrograms'|trans({}, 'catroweb') }}</h2>
      </div>
      <div class="programs"></div>
    </div>
  {% endif %}

  <div id="specific-programs-recommendations">
    <div id="recsys-specific-programs-headline" class="headline">
      <h2>{{ 'recommender.mostDownloadedProgramsOfUsersThatAlsoDownloadedOtherPrograms'|trans({}, 'catroweb') }}</h2>
    </div>
    <div class="programs"></div>
  </div>

  {% if not(app.user and my_program) %}
  <div id="more-from-this-user-recommendations">
    <div id="recsys-headline" class="headline">
      <h2>{{ 'recommender.moreFromThisUser'|trans({"%username%": program.user.username }, 'catroweb') }}</h2>
    </div>
    <div class="programs"></div>
  </div>
  {% endif %}

  {% include 'Program/programComments.html.twig' %}

{% endblock %}

{% block js %}
  <script src="{{ asset('compiled/js/Program.js') }}"></script>
  <script src="{{ asset('compiled/js/ProgramReport.js') }}"></script>
  <script>
    new ProgramReport('{{ program.id }}', '{{ path('catrobat_api_report_program') }}', '{{ url('login') }}',
      "{{ 'success.report'                          |trans({}, 'catroweb') }}",
      '{{ "error"                                   |trans({}, "catroweb") }}',
      '{{ "programs.report"                         |trans({}, "catroweb") }}',
      '{{ "cancel"                                  |trans({}, "catroweb") }}',
      '{{ "programs.reportDialogHeader"             |trans({}, "catroweb") }}',
      '{{ "programs.reportDialogReason"             |trans({}, "catroweb") }}',
      '{{ "programs.reportRadioButtonInappropriate" |trans({}, "catroweb") }}',
      '{{ "programs.reportRadioButtonCopyright"     |trans({}, "catroweb") }}',
      '{{ "programs.reportRadioButtonSpam"          |trans({}, "catroweb") }}',
      '{{ "programs.reportRadioButtonDislike"       |trans({}, "catroweb") }}',
        {{ constant('App\\Catrobat\\StatusCode::OK') }},
        {{ logged_in }}
    )
  </script>
  <script src="{{ asset('compiled/js/ProgramComments.js') }}"></script>
  <script>
    new ProgramComments('{{ program_details.id }}', 5, 5, 5, {{ (program_details.comments|length) }},
      "{{ 'cancel'                                  |trans({}, 'catroweb') }}",
      "{{ 'deleteIt'                                |trans({}, 'catroweb') }}",
      "{{ 'reportIt'                                |trans({}, 'catroweb') }}",
      "{{ 'areYouSure'                              |trans({}, 'catroweb') }}",
      "{{ 'noWayOfReturn'                           |trans({}, 'catroweb') }}",
      "{{ 'programs.deleteCommentConfirmation'      |trans({}, 'catroweb') }}",
      "{{ 'programs.reportCommentConfirmation'      |trans({}, 'catroweb') }}",
      "{{ 'programs.report_popup_header'            |trans({}, 'catroweb') }}",
      "{{ 'programs.report_popup'                   |trans({}, 'catroweb') }}",
      "{{ 'programs.deleted_popup_header'           |trans({}, 'catroweb') }}",
      "{{ 'programs.deleted_popup'                  |trans({}, 'catroweb') }}",
      "{{ 'programs.noAdminRights'                  |trans({}, 'catroweb') }}",
      "{{ 'somethingWentWrong'                      |trans({}, 'catroweb') }}",
      "{{ constant('App\\Catrobat\\StatusCode::OK') }}",
      "{{ constant('App\\Catrobat\\StatusCode::NOT_LOGGED_IN') }}",
      "{{ constant('App\\Catrobat\\StatusCode::NO_ADMIN_RIGHTS') }}"
    )
  </script>
  <script src="{{ asset('compiled/js/ProgramDescription.js') }}"></script>
  <script>
    new ProgramDescription('{{ program.id }}',
      '{{ ("show-more")                             |trans({}, "catroweb") }}',
      '{{ ("show-less")                             |trans({}, "catroweb") }}',
        {{ constant('App\\Catrobat\\StatusCode::OK') }},
        {{ constant('App\\Catrobat\\StatusCode::DESCRIPTION_TOO_LONG') }},
        {{ constant('App\\Catrobat\\StatusCode::RUDE_WORD_IN_DESCRIPTION') }}
    )
  </script>

  <script src="{{ asset('compiled/js/ProgramCredits.js') }}"></script>
  <script>
    new ProgramCredits('{{ program.id }}',
      '{{ ("show-more")                             |trans({}, "catroweb") }}',
      '{{ ("show-less")                             |trans({}, "catroweb") }}',
        {{ constant('App\\Catrobat\\StatusCode::OK') }},
        {{ constant('App\\Catrobat\\StatusCode::CREDITS_TO_LONG') }},
        {{ constant('App\\Catrobat\\StatusCode::RUDE_WORD_IN_CREDITS') }}
    )
  </script>

  <script>

    $(function () {
      var copy_button = $('.btn-copy')

      copy_button.tooltip({
        trigger  : 'manual',
        placement: 'right',
        container: '.btn-copy'
      })

      copy_button.on('shown.bs.tooltip', function () {
        setTimeout(function () {
          copy_button.tooltip('hide')
        }, 1000)
      })

      var cb = new Clipboard('.btn-copy')
      cb.on('success', function () {
        copy_button
        .attr('data-original-title', '{{ "clipboard.success"|trans({}, "catroweb") }}')
        .addClass('tooltip-success')
        .removeClass('tooltip-danger')
        copy_button.tooltip('show')
        $('.btn-copy +.tooltip .tooltip-inner').prepend('<i class=\'fa fa-check\' style=\'padding-right: 1em\'></i>')
      })

      cb.on('error', function () {
        copy_button
        .attr('data-original-title', '{{ "clipboard.fail"|trans({}, "catroweb") }}')
        .addClass('tooltip-danger')
        .removeClass('tooltip-success')
        copy_button.tooltip('show')
        $('.btn-copy +.tooltip .tooltip-inner').prepend('<i class=\'fa fa-close\' style=\'padding-right: 1em\'></i>')
      })

    })

    let program = new Program(
      '{{ path('ci_status', { 'id' : program.id }) }}',
      '{{ path('ci_build', { 'id' : program.id }) }}',
      '{{ 'apk.preparing'|trans({}, "catroweb") }}',
      '{{ 'apk.text'|trans({}, "catroweb") }}',
      '{{ 'programs.updateAppHeader'|trans({}, "catroweb") }}',
      '{{ 'programs.updateAppText'|trans({}, "catroweb") }}',
      '{{ 'programs.btnClosePopup'|trans({}, "catroweb") }}'
    )
    program.getApkStatus()
    program.createLinks()

    var download_href = document.getElementById('url-download').href

    function blockEventListener (event)
    {
      event.preventDefault()
    }

    $(document).on('click', '#url-download', function () {
      var url_link = document.getElementById('url-download')
      if (url_link.href !== 'javascript:void(0)')
      {
        url_link.href = 'javascript:void(0)'

        setTimeout(function () {
          url_link.href = download_href
        }, 5000)

        window.location = download_href
      }
      return false
    })

    var undefined
    var programID = '{{ program.id }}';
    var recs = new ProjectLoader('#recommendations', '{{ path('api_recsys_programs') }}', programID)
    recs.initRecsys()

    var recommendedByPageId = {{ constant('App\\Catrobat\\RecommenderSystem\\RecommendedPageId::PROGRAM_DETAIL_PAGE') }};
    var specificRecommender = new ProjectLoader('#specific-programs-recommendations', '{{ path('api_recsys_specific_projects', { 'id': program.id }) }}', programID, recommendedByPageId)
    specificRecommender.init()

    let more_from_this_user = new ProjectLoader('#more-from-this-user-recommendations', '{{ path('api_user_programs') }}')
    more_from_this_user.initMoreFromThisUser('{{ program.user.id }}', programID)

    counter = 10
    var cachedRemixData = null
    var remixGraphTranslations = {
      ok                                 : "{{ "ok"|trans({}, "catroweb") }}",
      by                                 : "{{ "remixGraph.by"|trans({}, "catroweb") }}",
      open                               : "{{ "remixGraph.open"|trans({}, "catroweb") }}",
      showPaths                          : "{{ "remixGraph.showPaths"|trans({}, "catroweb") }}",
      programNotAvailableErrorTitle      : "{{ "remixGraph.programNotAvailableErrorTitle"|trans({}, "catroweb") }}",
      programNotAvailableErrorDescription: "{{ "remixGraph.programNotAvailableErrorDescription"|trans({}, "catroweb") }}",
      programNotAvailable                : "{{ "remixGraph.programNotAvailable"|trans({}, "catroweb") }}",
      programUnknownUser                 : "{{ "remixGraph.programUnknownUser"|trans({}, "catroweb") }}"
    }

    var PROGRAM_LIKE_TYPE_NONE = {{ constant('App\\Entity\\ProgramLike::TYPE_NONE') }};

    function convertToHumanFriendlyNumberText (number)
    {
      if (number >= 10000)
      {
        return (number / 1000.0).toFixed(0) + 'k'
      }
      else if (number >= 1000)
      {
        return (number / 1000.0).toFixed(1).replace('.0', '') + 'k'
      }
      else
      {
        return number
      }
    }

    function updateLikeCount (likeType, likeTypeCount, totalLikeCount)
    {
      var programLikeDetailContainer = $('#program-like-detail-container')
      $('a.program-like-button').addClass('not-selected')
      $('#program-like-buttons-container > .program-like-counter').text(convertToHumanFriendlyNumberText(totalLikeCount))
      if (likeType === PROGRAM_LIKE_TYPE_NONE)
      {
        programLikeDetailContainer.html('&nbsp;')
        return
      }
      var likeTypeButton = $('a.program-like-button[data-like-type=' + likeType + ']')
      likeTypeButton.removeClass('not-selected')
      var singularOrPlural = (likeTypeCount === 1)
      var translatedDetailSpanTextTemplate = likeTypeButton.children(singularOrPlural ? '.singular' : '.plural')[0]
      var replaceCount = '<span class="program-like-counter">' + convertToHumanFriendlyNumberText(likeTypeCount) + '<span>'
      var translatedDetailText = translatedDetailSpanTextTemplate.innerHTML.replace((singularOrPlural ? '1' : '2'), replaceCount)
      programLikeDetailContainer.html(translatedDetailText)
    }

    $(document).ready(function () {
      var loadingAnimation = new LoadingAnimation('#177f8d', "{{ "pleaseWait"|trans({}, "catroweb") }}")
      var recommendedByRemixGraphPageId = {{ constant('App\\Catrobat\\RecommenderSystem\\RecommendedPageId::PROGRAM_DETAIL_PAGE_REMIX_GRAPH') }};
      var networkDirector = new NetworkDirector()
      var remixGraph = RemixGraph.getInstance()
      remixGraph.init(programID, recommendedByRemixGraphPageId, 'remix-graph-modal', 'remix-graph-layer', 'close-button',
        "{{ program_details_url_template }}", "{{ path('click_stats') }}", remixGraphTranslations)

      updateLikeCount({{ program_details.likeType }}, {{ program_details.likeTypeCount }}, {{ program_details.totalLikeCount }})

      $('#remix-graph-modal-link').animatedModal({
        modalTarget: 'remix-graph-modal',
        animatedIn : 'zoomInUp',
        animatedOut: 'bounceOutDown',
        color      : '#177f8d',
        beforeOpen : function () {
          remixGraph.destroy()
          if (cachedRemixData != null)
          {
            document.addEventListener('gesturestart', blockEventListener)
            document.ontouchmove = blockEventListener
            var networkBuilder = new NetworkBuilder(programID, 'remix-graph-layer', remixGraphTranslations, cachedRemixData)
            var networkDescription = networkDirector.construct(networkBuilder)
            remixGraph.render(loadingAnimation, networkDescription)
          }
          else
          {
            $.ajax({
              url    : "{{ path('program_remix_graph', { 'id' : program.id }) }}",
              type   : 'get',
              success: function (remixData) {
                cachedRemixData = remixData
                document.addEventListener('gesturestart', blockEventListener)
                document.ontouchmove = blockEventListener
                var networkBuilder = new NetworkBuilder(programID, 'remix-graph-layer', remixGraphTranslations, remixData)
                var networkDescription = networkDirector.construct(networkBuilder)
                remixGraph.render(loadingAnimation, networkDescription)
              },
              error  : function () {
                alert('Unable to fetch remix-graph!')
              }
            })
          }
          console.log('The animation was called')
        },
        afterOpen  : function () {
          loadingAnimation.show()
          console.log('The animation is completed')
        },
        beforeClose: function () {
          console.log('The animation was called')
          loadingAnimation.hide()
        },
        afterClose : function () {
          console.log('The animation is completed')
          document.removeEventListener('gesturestart', blockEventListener)
          document.ontouchmove = null
          location.reload()
        }
      })

      $(document).on('click', '#remix-graph-button', function () {
        $('#remix-graph-modal-link').click()
      })

      $(document).on('click', 'a.program-like-button', function (event) {
        event.preventDefault()
        var type = $(this).attr('data-like-type')
        var url = "{{ path('program_like', { 'id' : program.id }) }}?type=" + type
        var username = "{{ user_name }}"
        if (username === '')
        {
          window.location.href = url
          return false
        }

        $('#program-like-detail-container').text("{{ "pleaseWait"|trans({}, "catroweb") }}")
        $('a.program-like-button').addClass('not-selected')
        $(this).removeClass('not-selected')

        $.ajax({
          url    : url,
          type   : 'get',
          data   : {type: type},
          success: function (data) {
            if (data.statusCode !== {{ constant('App\\Catrobat\\StatusCode::OK') }})
            {
              if (data.statusCode === {{ constant('App\\Catrobat\\StatusCode::LOGIN_ERROR') }})
              {
                window.location.href = url
                return
              }
              alert('something went wrong')
              $(this).addClass('not-selected')
              return
            }
            updateLikeCount(data.data.likeType, data.data.likeTypeCount, data.data.totalLikeCount)
          },
          error  : function () {
            alert('something went terribly wrong')
            $(this).addClass('not-selected')
          }
        })
        return false
      })
    })

    $(document).ready(function () {

      $(document).on('click', '.rec-programs', function(event) {

        event.preventDefault()

        let href = $(this).attr('href')
        let click_type = 'no type'
        let additions = 0

        if (href.indexOf('tag') > 0)
        {
          click_type = 'tags'
          additions = (href.match(/[0-9]+/))[0]
        }
        else if (href.indexOf('extension') > 0)
        {
          click_type = 'extensions'
          var list = href.split('/')
          additions = list[list.length - 1]
        }
        else if (href.indexOf('project') > 0)
        {
          click_type = 'project'
          additions = (href.split('project/')[1]).split('?')[0]

          let containerElement = $(this).parent('.program').parent('.programs').parent()
          if (containerElement.attr('id') === 'specific-programs-recommendations')
          {
            click_type = 'rec_specific_programs'
          }
        }

        $.ajaxSetup({async: false})
        $.post("{{ path('click_stats') }}", {
          type     : click_type,
          recFromID: '{{ program.id }}',
          recID    : additions
        }, function (data) {
          if (data === 'error')
          {
            console.log('No click statistic is created!')
          }
        }).fail(function (data) {
          console.log(data)
        })
        window.location.href = href
      })
    })

  </script>
{% endblock %}
