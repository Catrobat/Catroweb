{% extends ':Default:base.html.twig' %}

{% block head %}
    <link rel="stylesheet" href="{{ asset('css/plugins/sweetalert.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/plugins/font-awesome.min.css') }}" />
{% endblock %}

{% block body %}
<div class="row">
    <div class="col-md-12">
        <h1>{{ "notifications"|trans({}, "catroweb") }}</h1>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div id="notifications">
            {% for originalProgramId, data in unseenRemixesGrouped %}
                <div class="remixed-programs">
                    <div id="search-results-text">
                        <strong>
                            {{ "programs.newRemixesNotificationTitle"|transchoice(data.remixes|length, {
                                '%programName%' : data.originalProgramName,
                                '%remixes%' : data.remixes|length
                            }, "catroweb") }}
                        </strong>
                    </div>

                    <div class="programs">
                        {% for remixData in data.remixes %}
                            <div class="program" id="program-{{ remixData.remixProgramId }}" style="display:block;">
                                <a href="{{ url('see_user_notification', {
                                    'ancestor_id' : remixData.originalProgramId,
                                    'descendant_id' : remixData.remixProgramId
                                }) }}" class="notification-link">
                                    <div><img src="{{ remixData.thumbnail }}"></div>
                                    <div class="program-name"><b>{{ remixData.remixProgramName }}</b></div>
                                    <div><div class="img-time-small"></div>{{ remixData.age }}</div></a>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

<div id="catro-notification-container" class="row">
    {% for notification in catroUserNotifications %}
        <div class="col-md-12">
            {{ include(notification.getTwigTemplate) }}
        </div>
    {% endfor %}
</div>
<div class="clear"></div>

<div>
    <button id="mark-all-as-seen" class="btn btn-primary download-button"><i class="fa fa-check" aria-hidden="true"></i>
        {{ "clearAllNotificationsButtonTitle"|trans({}, "catroweb") }}
    </button>
</div>

<div id="error" class="no-notifications-placeholder">
    <i class="fa fa-check fa-6" style="font-size:16em" aria-hidden="true"></i>
    <p><b>{{ "wellDone"|trans({}, "catroweb") }}</b><br />{{ "notificationsReadMessage"|trans({}, "catroweb") }}</p>
</div>

{% endblock %}

{% block js %}
  <script>
      function markUserNotificationAsSeen() {
          $.ajax({
              url: "{{ url('user_notifications_seen') }}",
              type: "get",
              success: function(data) {
                  if (!data.success) {
                      swal("{{ "somethingWentWrong"|trans({}, "catroweb") }}", "{{ "notificationsClearError"|trans({}, "catroweb") }}", "error");
                      return;
                  }

                  $("#notifications").children().remove();
                  $("#catro-notification-container").children().remove();
                  $("#mark-all-as-seen").hide();
                  $(".user-notification-badge").removeAttr("data-badge");
                  $(".no-notifications-placeholder").show();
                swal(
                  {
                    title: "{{ "done"|trans({}, "catroweb") }}",
                    text: "{{ "notificationsClearedMessage"|trans({}, "catroweb") }}",
                    type: "success",
                    confirmButtonClass: 'btn btn-success',
                    confirmButtonColor: ''
                  }
                );
              },
              error: function() {
                  swal("{{ "somethingWentWrong"|trans({}, "catroweb") }}", "{{ "notificationsClearError"|trans({}, "catroweb") }}", "error");
              }
          });
      }
      function markAsRead(id)
      {
        $.ajax({
          url    : "{{ url('catro_notification_mark_as_read') }}" + "/" + id,
          type   : "get",
          success: function(data)
          {
            if (data.success)
            {
              var current_number = $('.user-notification-badge').data("badge");
              if (current_number > 1)
              {
                $('.user-notification-badge').data("badge", current_number - 1);
              }
              $('#catro-notification-' + id).fadeOut(function()
              {
                $('#catro-notification-' + id).parent().remove();
                if ($('#catro-notification-container').children().length === 0)
                {
                  $("#catro-notification-container").children().remove();
                  $("#mark-all-as-seen").hide();
                  $(".user-notification-badge").removeAttr("data-badge");
                  $(".no-notifications-placeholder").show();
                  swal(
                    {
                      title: "{{ "done"|trans({}, "catroweb") }}",
                      text: "{{ "notificationsClearedMessage"|trans({}, "catroweb") }}",
                      type: "success",
                      confirmButtonClass: 'btn btn-success',
                      confirmButtonColor: ''
                    }
                  );
                }
              });
            }
            else
            {
              console.error(data.message);
            }
          }
        });
      }

      $(document).ready(function() {
          var totalNumOfRemixes = {{ unseenRemixesGrouped|length }};
          totalNumOfRemixes += {{ catroUserNotifications|length }};
          if (totalNumOfRemixes == 0) {
              $("#mark-all-as-seen").hide();
              $(".no-notifications-placeholder").show();
          } else {
              $(".no-notifications-placeholder").hide();
          }
          $("#mark-all-as-seen").click(markUserNotificationAsSeen);
          $(".notification-link").click(function () {
              var programLayer = $(this).parent(".program");
              var parentProgramsLayer = programLayer.parent(".programs");
              var remixedProgramsLayer = parentProgramsLayer.parent(".remixed-programs");
              programLayer.remove();

              if (parentProgramsLayer.children().length == 0) {
                  remixedProgramsLayer.remove();
                  if ($("#notifications").children().length == 0) {
                      $("#mark-all-as-seen").hide();
                      $(".no-notifications-placeholder").show();
                  }
              }
              window.location = $(this).attr("href");
              return true;
          });
      });
  </script>
{% endblock %}
