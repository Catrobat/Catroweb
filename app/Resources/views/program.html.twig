{% extends ':Default:base.html.twig' %}

{% block head %}
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/program.css') }}" media="screen"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="{{ asset('css/plugins/jquery.contextMenu.min.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/plugins/sweetalert.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/plugins/vis.min.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/remixgraph.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/'~theme()~'/loadinganimation.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/plugins/font-awesome.min.css') }}" />
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css" />

  <script src="https://share.catrob.at/html5/player/pocketCodePlayer.min.js"></script>
  <script src=" {{  asset( getJavascriptPath('loginscript.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('LoadingAnimation.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('jquery.contextMenu.min.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('jquery.ui.position.min.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('animatedModal.min.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('vis.min.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('clipboard.min.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('remixgraph.configuration.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('remixgraph.builder.js') )}}"></script>
  <script src=" {{  asset( getJavascriptPath('remixgraph.visualization.js') )}}"></script>

  <meta property="og:image" content="{{ asset(program_details.screenshotBig, absolute=true) }}" />
  <meta property="og:type" content="website" />
  <meta property="og:image:secure_url" content="{{ asset(program_details.screenshotBig, absolute=true) }}" />
  <meta property="og:title" content="{{ program.name|escape('html_attr') }}" />
  {% if program.description is empty %}
    <meta property="og:description" content="{{ "programs.checkout_this_program"|trans({}, "catroweb") }}" />
  {% else %}
    <meta property="og:description" content="{{ program.description|escape('html_attr') }}" />
  {% endif %}
  <meta property="og:url" content="{{ url('program', {id: program.id}) }}" />
{% endblock %}

{% block body %}
  <div id="program-top" class="h1">
    <div id="program-name">{{ program.name }}</div>
    <div id="program-user">
      <a href="{{ url('profile', { id : program.user.id }) }}">{{ program.user }}</a>
    </div>
    <div class="clear"></div>
  </div>

  <div id="program-middle">
    <div id="image" class="image-container">
      {% if isWebview() %}
        <a href="{% if (checkCatrobatLanguage(program_details.languageVersion)) %}{{ program_details.downloadUrl }}{% else %}javascript:program.showUpdateAppPopup();{% endif %}">
          <img id="img-screenshot" width="300" height="300" id="screenshot" src="{{ asset(program_details.screenshotBig) }}" />
        </a>
      {% endif %}

      {% if not isWebview() %}
        <img id="img-screenshot" width="300" height="300" id="screenshot" src="{{ asset(program_details.screenshotBig) }}" />
        <button class="pc-startButton" onclick="javascript: launchProject({{ program.id }});"> <svg preserveAspectRatio="xMidYMin meet" viewBox="0,0,64,64"> <path class="pc-svgPlayerIconBorder" d="M32,1C14.88,1,1,14.88,1,31.999C1,49.12,14.88,63,32,63s31-13.88,31-31.001C63,14.88,49.12,1,32,1z M32,56.979c-13.796,0-24.98-11.184-24.98-24.98c0-13.795,11.185-24.98,24.98-24.98s24.979,11.186,24.979,24.98 C56.979,45.796,45.796,56.979,32,56.979z"></path> <polygon class="pc-svgPlayerIconSymbol" points="34.662,32 22.934,44.066 27.438,48.55 43.629,32 27.438,15.45 22.934,19.934"></polygon> </svg> </button>
      {% endif %}

      <div id="program-like-container">
        <div>
          <div id="program-like-buttons-container">
            <a id="program-like-thumbs-up" class="program-like-button" href="#" data-like-type="{{ constant('Catrobat\\AppBundle\\Entity\\ProgramLike::TYPE_THUMBS_UP') }}">
              <img class="img-share" src="{{ asset('images/social/like/thumbs_up.png') }}" alt="Thumbs up!" title="Thumbs up!"/>
              <span class="singular">{{ "programs.likeThumbsUpDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span class="plural">{{ "programs.likeThumbsUpDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-smile" class="program-like-button" href="#" data-like-type="{{ constant('Catrobat\\AppBundle\\Entity\\ProgramLike::TYPE_SMILE') }}">
              <img class="img-share" src="{{ asset('images/social/like/smile.png') }}" alt="Smile!" title="Smile!"/>
              <span class="singular">{{ "programs.likeSmileDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span class="plural">{{ "programs.likeSmileDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-love" class="program-like-button" href="#" data-like-type="{{ constant('Catrobat\\AppBundle\\Entity\\ProgramLike::TYPE_LOVE') }}">
              <img class="img-share" src="{{ asset('images/social/like/love.png') }}" alt="Love!" title="Love!"/>
              <span class="singular">{{ "programs.likeLoveDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span class="plural">{{ "programs.likeLoveDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <a id="program-like-wow" class="program-like-button" href="#" data-like-type="{{ constant('Catrobat\\AppBundle\\Entity\\ProgramLike::TYPE_WOW') }}">
              <img class="img-share" src="{{ asset('images/social/like/wow.png') }}" alt="Wooow!" title="Wooow!"/>
              <span class="singular">{{ "programs.likeWowDetailText"|transchoice(1, { '%persons%' : 1 }, "catroweb") }}</span>
              <span class="plural">{{ "programs.likeWowDetailText"|transchoice(2, { '%persons%' : 2 }, "catroweb") }}</span>
            </a>
            <span id="program-like-counter" class="program-like-counter"></span>
          </div>
        </div>
        <div id="program-like-detail-container">&nbsp;</div>
      </div>
    </div>

    <div id="info">
      <h2>{{ "description"|trans({}, "catroweb") }}</h2>

      <div id="description">
        {% if program.description %}
          {{ program.description|nl2br }}
        {% else %}
          {{ "noDescription"|trans({}, "catroweb") }}
        {% endif %}
      </div>

      {% if  program.tags|length > 0  or program.extensions|length > 0 %}
        <div id="tag-extension-container">

          {% if program.extensions|length > 0 %}
            <div id="extension-container">
              <div class="tags-extensions-text">{{ ("extenstion-text")|trans({}, "catroweb") }}:</div>
                <div class="tagext">
                  {% for extension in program.extensions %}
                    <a class="rec-programs" href="{{ url('extension_search', { q : extension.name }) }}">
                      <button id={{ extension.name }} class="btn-tags-extensions"> {{ extension.name }}</button>
                    </a>
                  {% endfor %}
              </div>
            </div>
          {% endif %}

          {% if  program.tags|length > 0 %}
            <div id="tag-container">
              <div class="tags-extensions-text">{{ ("tag-text")|trans({}, "catroweb") }}:</div>
              <div class='tagext'>
                {% for tag in program.tags %}
                  <a class="rec-programs" href="{{ url('tag_search', { q : tag.id }) }}">
                    <button id={{ tag.en }} class="btn-tags-extensions"> {{ ("tags.constant.tag"~tag.id)|trans({}, "catroweb") }}</button>
                  </a>
                {% endfor %}
              </div>
            </div>
          {% endif %}

        </div>
      {% endif %}

      <div class="download-container">
{#        {% if not isWebview() %}#}
          <a id="url-download" href="{% if (checkCatrobatLanguage(program_details.languageVersion)) %}{{ program_details.downloadUrl }}{% else %}javascript:program.showUpdateAppPopup();{% endif %}">
            <button id="download" class="btn btn-primary download-button">
              <table>
                <tr>
                  <td><img src="{{ asset('images/symbols/download.svg') }}" > </td>
                  <td>{{ "download"|trans({}, "catroweb") }}</td>
                </tr>
              </table>
            </button>
          </a>

          <button id="remix-graph-button" class="btn btn-primary download-button">
            <table>
              <tr>
                <td><i class="fa fa-sitemap" aria-hidden="true" style="font-size: 40px"></i></td>
                <td>{{ "remixGraph.showRemixGraph"|trans({}, "catroweb") }}</td>
              </tr>
            </table>
          </button>

          <button id="apk-generate" class="btn  btn-primary btn-apk download-button">
            <table>
              <tr>
                <td><img src="{{ asset('images/symbols/apk_download.svg') }}" /></td>
                <td>{{ "apk.prepare"|trans({}, "catroweb") }}</td>
              </tr>
            </table>
          </button>

          <button id="apk-pending" class="btn  btn-primary download-button">
            <table id="pending-table">
              <tr>
                <td id="replace-me"><img src="{{ asset('images/symbols/apk_download.svg') }}" /></td>
                <td>{{ "apk.preparing"|trans({}, "catroweb") }}</td>
              </tr>
            </table>
          </button>

          <button id="apk-download" class="btn btn-apk btn-primary download-button">
            <table>
              <tr>
                <td><img src="{{ asset('images/symbols/apk_download.svg') }}" /></td>
                <td>{{ "apk.download"|trans({}, "catroweb") }}</td>
              </tr>
            </table>
          </button>
        {#{% endif %}#}

{#        {% if isWebview() %}
          <button id="remix-graph-button" class="btn btn-primary download-button">
            <table>
              <tr>
                <td><i class="fa fa-sitemap" aria-hidden="true" style="font-size: 40px"></i></td>
                <td>{{ "remixGraph.showRemixGraph"|trans({}, "catroweb") }}</td>
                </tr>
            </table>
          </button>

          <div class="backdrop"></div>
          <div class="fab child" data-subitem="1">
            <span>
              <div>
                <img id="apk-generate" src="{{ asset('images/symbols/apk_download.svg') }}" />
                <i id="apk-pending" class="fa fa-refresh fa-spin fa-inverse" aria-hidden="true"></i>
                <img id="apk-download" src="{{ asset('images/symbols/apk_download.svg') }}" />
              </div>
            </span>
          </div>

          <div class="fab child" data-subitem="2">
            <span>
              <div>
                <a id="url-download" href="{% if (checkCatrobatLanguage(program_details.languageVersion)) %}{{ program_details.downloadUrl }}{% else %}javascript:program.showUpdateAppPopup();{% endif %}">
                <img src="{{ asset('images/symbols/download.svg') }}" >
                </a>
              </div>
            </span>
          </div>
          <div class="fab" id="masterfab"><span><i id="action-arrow" class="fa fa-angle-up"></i></span></div>
      {% endif %}#}
      </div>

      {% if nolb_status and program.user == app.user.username %}
        <button id="nolb-project-button" class="btn download-button">
          <table>
            <tr>
              <td><img src="{{ asset('images/symbols/nolb-submit-button-icon.png') }}" > </td>
              <td>{{ "pmd.submitBtn"|trans({}, "catroweb") }}</td>
            </tr>
          </table>
        </button>

        <div id="nolb-submission-box">
          <h2> {{ "pmd.submitBox.header"|trans({}, "catroweb") }} </h2>
          <button id="nolb-submission-box-cancel"><i class="fa fa-close"></i></button>
          <p> {{ "pmd.submitBox.text"|trans({}, "catroweb") }}</p>
          <div class="input-field">
            <input type="number" id="nolb-submission-project-id" name="NOLB-submission-id" placeholder="Your project ID">
          </div>
          <button id="nolb-submission-button" class="btn">
            <p>{{ "pmd.submitBox.btnText"|trans({}, "catroweb") }}</p>
          </button>
        </div>


        <div id="nolb-submission-successful">
          <h2> {{ "pmd.submitBox.header"|trans({}, "catroweb") }} </h2>
          <p>{{ "pmd.successful.text"|trans({}, "catroweb") }}</p>
          <button id="nolb-submission-successful-ok" class="btn">
            <p>{{ "ok"|trans({}, "catroweb") }}</p>
          </button>
        </div>

        <div id="nolb-submission-failed">
          <h2> {{ "pmd.submitBox.header"|trans({}, "catroweb") }} </h2>
          <p>{{ "pmd.failed.text"|trans({}, "catroweb") }}</p>
          <button id="nolb-submission-failed-ok" class="btn">
            <p>{{ "ok"|trans({}, "catroweb") }}</p>
          </button>
        </div>

      {% endif %}

      {% if not program.gamejam or not program.acceptedforgamejam %}
        {% if jam %}
          <div id="gamejam-div">
            <a href="{% if app.user %} {{ url('gamejam_web_submit', { "id": program.id })  }}{% else %}{{ url('login') }}{% endif %}"  title="{{ jam.name }}">
              <button id="gamejam-submission" class="btn btn-jam download-button">
                <table>
                  <tr>
                    <td><img src="{{ asset( jam.logo_url ) }}" > </td>
                    <td>{{ "gamejam.submit"|trans({ '%gamejamname%' : jam.name}, "catroweb") }}</td>
                  </tr>
                </table>
              </button>
            </a>
          </div>
          <div id="gamejam-whats">
            <a href="{{ jam.gamejam_url }}">{{ "gamejam.whats"|trans({ '%gamejamname%' : jam.name}, "catroweb") }}</a>
          </div>
        {% endif %}
      {% endif %}
      <div class="clear"></div>
      <button type="button" class="btn btn-lg btn-link btn-copy"
              data-clipboard-text="{{ url('program', { id : program.id }) }}"
              style="text-shadow: none;">
        <span class="fa fa-link" aria-hidden="true"></span>
        Link
      </button>
      <span id="report">{{ "programs.reportAsInappropriate"|trans({}, 'catroweb') }}</span>
    </div>

    <div class="clear"></div>
    <div id="report-container" class="size-large">
      {% if app.user %}
        {% if my_program %}
          {{ "programs.reportOwnProgram"|trans({}, "catroweb") }} ... LOL?
        {% elseif already_reported %}
          {{ "programs.reportAlready"|trans({}, "catroweb") }}
        {% else %}
          <span id="report-form">
            {{ "programs.reportDialogHeader"|trans({}, "catroweb") }}
            <br>
          <textarea id="reportReason" placeholder="{{ "programs.reportDialogReason"|trans({}, "catroweb") }}"></textarea>
          <br>
          <button id="report-cancel" class="btn-white">{{ "cancel"|trans({}, "catroweb") }}</button>
          <button id="report-report" class="btn-green">{{ "report"|trans({}, "catroweb") }}</button>
          </span>
          <span id="report-done">
            {{ "programs.reportDone"|trans({}, "catroweb") }}
          </span>
        {% endif %}
      {% else %}
        {% set loginText = "loginText"|trans({}, "catroweb") %}
        {{ "programs.reportLoginText"|trans({"%login%" : "<a href=\"" ~ url('login') ~ "\">" ~ loginText ~ "</a>"}, "catroweb")|raw }}
      {% endif %}
    </div>
  </div>

  {#
   # CODEVIEW
   #}
  {% if program_details.languageVersion >= 0.97 %}
    {{ render(controller('AppBundle:Web/CodeView:viewCode', {'id' : program.id})) }}
  {% endif %}

  <div id="program-bottom">
    <div id="icon-author">
      <div class="img-author-2 icon"></div>
      <a href="{{ url('profile', { id : program.user.id }) }}" class="icon-text">{{ program.user }}</a>
    </div>
    <div>
      <div class="img-age icon"></div>
      <span class="icon-text">{{ program_details.age }}</span>
    </div>
    <div>
      <div class="img-size icon"></div>
      <span class="icon-text">{{ program_details.filesize }} MB</span>
    </div>
    <div>
      <div class="img-downloads icon"></div>
      <span class="icon-text">{{ "programs.downloads"|trans({ '%downloads%' : program_details.downloads }, "catroweb") }}</span>
    </div>
    <div>
      <div class="img-views icon"></div>
      <span class="icon-text">{{ "programs.views"|trans({ '%views%' : program_details.views }, "catroweb") }}</span>
    </div>
    <div id="icon-remix">
      <a id="remix-graph-modal-link" href="#remix-graph-modal">
        <img src="{{ asset('images/symbols/remix.png') }}"/>
        <span class="icon-text">
          {{ "programs.remixes"|transchoice(program_details.remixesLength, { '%remixes%' : program_details.remixesLength }, "catroweb") }}
        </span>
      </a>
    </div>
  </div>

  <div id="remix-graph-modal">
    <div class="close-remix-graph-modal">
      <img class="close-button" src="{{ asset('images/symbols/close_button.svg') }}" />
    </div>
    <div id="remix-graph-layer" class="modal-content"></div>
  </div>

  {% if  program.tags|length > 0  or program.extensions|length > 0 %}
  <div id="recommendations">
    <div id="recsys-headline">
      <h2>{{ 'recommender.similarPrograms'|trans({}, 'catroweb') }}</h2>
    </div>
    <div class="programs"></div>
  </div>
  {% endif %}

  <div id="specific-programs-recommendations">
    <div id="recsys-specific-programs-headline">
      <h2>{{ 'recommender.mostDownloadedProgramsOfUsersThatAlsoDownloadedOtherPrograms'|trans({}, 'catroweb') }}</h2>
    </div>
    <div class="programs"></div>
  </div>

  <div id="comment-successfully-reported">
    <h3>{{ 'programs.report_popup_header'|trans({}, 'catroweb') }}</h3>
    <p>{{ 'programs.report_popup'|trans({}, 'catroweb') }}</p>
    <button id="close-reported-popup">Ok</button>
  </div>

  <div id="program-comments">

    <p>{{ 'programs.comments'|trans({}, 'catroweb') }}</p>
    <div id="user-comment-wrapper">
      <textarea class="msg" style="width: 100%; height: 100px"></textarea>
      <button id="post-button" class="btn btn-primary">{{ 'programs.send'|trans({}, 'catroweb') }}</button>
    </div>

    <div id="comments-wrapper">
      {% for comment in program_details.comments|slice(0, 10) %}
        <div id="comment-{{ comment.id }}" class = "single-comment">
          <div class = "avatar-wrapper">
            <div class = "img-avatar"></div>
          </div>
          <div class = "comment-payload-wrapper">
            <div class = "name-date-wrapper">
              <a href="{{ url('profile', { id : comment.userId }) }}">
                <div id="profile-comment-user-id-{{ comment.userId }}" class = "usr-name">{{ comment.username }}</div></a>
              <div class = "date"> {{ comment.uploadDate.format('Y-m-d') }}</div>
              <button id="report-button-{{ comment.id }}" class="report-button" data-commentId="{{ comment.id }}">{{ 'programs.report'|trans({}, 'catroweb') }}</button>
              {% if  program_details.isAdmin  %}
                <button id="delete-button-{{ comment.id }}" class="delete-button" data-commentId="{{ comment.id }}">{{ 'programs.delete'|trans({}, 'catroweb') }}</button>
              {% endif %}
            </div>
            <div class = "comment-text">
              <p>{{ comment.text}}</p>
            </div>
          </div>
        </div>
      {% endfor %}
      {% for comment in program_details.comments|slice(10, program_details.comments|length) %}
        <div id="comment-{{ comment.id }}" class = "single-comment hidden">
          <div class = "avatar-wrapper">
            <div class = "img-avatar"></div>
          </div>
          <div class = "comment-payload-wrapper">
            <div class = "name-date-wrapper">
              <a href="{{ url('profile', { id : comment.userId }) }}">
                <div id="profile-comment-user-id-{{ comment.userId }}"  class = "usr-name">{{ comment.username }}</div></a>
              <div class = "date"> {{ comment.uploadDate.format('Y-m-d') }}</div>
              <button id="report-button-{{ comment.id }}" class="report-button" data-commentId="{{ comment.id }}">{{ 'programs.report'|trans({}, 'catroweb') }}</button>
              {% if  program_details.isAdmin  %}
                <button id="delete-button-{{ comment.id }}" class="delete-button" data-commentId="{{ comment.id }}">{{ 'programs.delete'|trans({}, 'catroweb') }}</button>
              {% endif %}
            </div>
            <div class = "comment-text">
              <p>{{ comment.text }}</p>
            </div>
          </div>
        </div>
      {% endfor %}

      <div class = "show-more">
        <button id="show-more-button" {% if program_details.comments|length <= 10 %} style="display: none" {% endif %}>{{ 'programs.show_more'|trans({}, 'catroweb') }}</button>
      </div>
    </div>
  </div>

{% endblock %}

{% block js %}
  <script src="{{ asset('js/custom/Program.js') }}"></script>
  <script>
    $(function()
    {
      var copy_button = $('.btn-copy');

      copy_button.tooltip({
        trigger: 'manual',
        placement: 'right'
      });

      copy_button.on('shown.bs.tooltip', function()
      {
        setTimeout(function() {
          copy_button.tooltip('hide');
        }, 1000);
      });

      var cb = new Clipboard('.btn-copy');
      cb.on('success', function(e) {
        copy_button
        .attr('data-original-title', '{{ "clipboard.success"|trans({}, "catroweb") }}')
        .addClass('tooltip-success')
        .removeClass('tooltip-danger');
        copy_button.tooltip('show');
        $('.btn-copy +.tooltip .tooltip-inner').prepend("<i class='fa fa-check' style='padding-right: 1em'></i>");
      });

      cb.on('error', function(e) {
        copy_button
        .attr('data-original-title', '{{ "clipboard.fail"|trans({}, "catroweb") }}')
        .addClass('tooltip-danger')
        .removeClass('tooltip-success');
        copy_button.tooltip('show');
        $('.btn-copy +.tooltip .tooltip-inner').prepend("<i class='fa fa-close' style='padding-right: 1em'></i>");
      });

    });

    var program = new Program('{{ path('ci_status', { 'id' : program.id }) }}', '{{ path('ci_build', { 'id' : program.id }) }}',
      '{{ 'apk.preparing'|trans({}, "catroweb") }}','{{ 'apk.text'|trans({}, "catroweb") }}','{{ asset('images/symbols/loading.gif') }}',
      '{{ 'programs.updateAppHeader'|trans({}, "catroweb") }}','{{ 'programs.updateAppText'|trans({}, "catroweb") }}',
      '{{ 'programs.btnClosePopup'|trans({}, "catroweb") }}');
    program.getApkStatus();
    program.createLinks();
    program.setReportListener({{ program.id }}, '{{ path('catrobat_api_report_program') }}');

    var download_href = document.getElementById("url-download").href;

    function blockEventListener(event) {
      event.preventDefault();
    }

    $(document).on("click", "#url-download", function() {
      var url_link = document.getElementById("url-download");
      if(url_link.href != 'javascript:void(0)') {
          url_link.href = 'javascript:void(0)';

        setTimeout(function() {
          url_link.href = download_href;
        }, 5000);

        window.location = download_href;
      }
      return false;
    });

    var undefined;
    var programID = {{ program.id }};
    var recs = new ProgramLoader('#recommendations', '{{ path('api_recsys_programs') }}', undefined, programID);
    recs.initRecsys();

    var recommendedByPageId = {{ constant('Catrobat\\AppBundle\\RecommenderSystem\\RecommendedPageId::PROGRAM_DETAIL_PAGE') }};
    var specificRecommender = new ProgramLoader('#specific-programs-recommendations', '{{ path('api_recsys_specific_programs', { 'id': program.id }) }}', undefined, programID, recommendedByPageId);
    specificRecommender.initSpecificRecsys();

    counter = 10;
    var cachedRemixData = null;
    var remixGraphTranslations = {
      ok: "{{ "ok"|trans({}, "catroweb") }}",
      by: "{{ "remixGraph.by"|trans({}, "catroweb") }}",
      open: "{{ "remixGraph.open"|trans({}, "catroweb") }}",
      showPaths: "{{ "remixGraph.showPaths"|trans({}, "catroweb") }}",
      programNotAvailableErrorTitle: "{{ "remixGraph.programNotAvailableErrorTitle"|trans({}, "catroweb") }}",
      programNotAvailableErrorDescription: "{{ "remixGraph.programNotAvailableErrorDescription"|trans({}, "catroweb") }}",
      programNotAvailable: "{{ "remixGraph.programNotAvailable"|trans({}, "catroweb") }}",
      programUnknownUser: "{{ "remixGraph.programUnknownUser"|trans({}, "catroweb") }}"
    };

    var PROGRAM_LIKE_TYPE_NONE = {{ constant('Catrobat\\AppBundle\\Entity\\ProgramLike::TYPE_NONE') }};

    function convertToHumanFriendlyNumberText(number) {
        if (number >= 10000) {
            return (number / 1000.0).toFixed(0) + "k";
        } else if (number >= 1000) {
            return (number / 1000.0).toFixed(1).replace(".0", "") + "k";
        } else {
            return number;
        }
    }

    function updateLikeCount(likeType, likeTypeCount, totalLikeCount) {
        $("a.program-like-button").removeClass("selected");
        $("#program-like-buttons-container > .program-like-counter").text(convertToHumanFriendlyNumberText(totalLikeCount));
        if (likeType == PROGRAM_LIKE_TYPE_NONE) {
            $("#program-like-detail-container").html("&nbsp;");
            return;
        }
        var likeTypeButton = $("a.program-like-button[data-like-type=" + likeType + "]");
        likeTypeButton.addClass("selected");
        var singularOrPlural = (likeTypeCount == 1) ? true : false;
        var translatedDetailSpanTextTemplate = likeTypeButton.children(singularOrPlural ? ".singular" : ".plural")[0];
        var replaceCount = '<span class="program-like-counter">' + convertToHumanFriendlyNumberText(likeTypeCount) + '<span>';
        var translatedDetailText = translatedDetailSpanTextTemplate.innerHTML.replace((singularOrPlural ? "1" : "2"), replaceCount);
        $("#program-like-detail-container").html(translatedDetailText);
    }

    $(document).ready(function() {
      var loadingAnimation = new LoadingAnimation('#177f8d', "{{ "pleaseWait"|trans({}, "catroweb") }}");
      var recommendedByRemixGraphPageId = {{ constant('Catrobat\\AppBundle\\RecommenderSystem\\RecommendedPageId::PROGRAM_DETAIL_PAGE_REMIX_GRAPH') }};
      var networkDirector = new NetworkDirector();
      var remixGraph = RemixGraph.getInstance();
      remixGraph.init(programID, recommendedByRemixGraphPageId, "remix-graph-modal", "remix-graph-layer", "close-button",
          "{{ program_details_url_template }}", "{{ path('click_stats') }}", remixGraphTranslations);

      updateLikeCount({{ program_details.likeType }}, {{ program_details.likeTypeCount }}, {{ program_details.totalLikeCount }});

      $("#remix-graph-modal-link").animatedModal({
        modalTarget: 'remix-graph-modal',
        animatedIn: 'zoomInUp',
        animatedOut: 'bounceOutDown',
        color: '#177f8d',
        beforeOpen: function() {
          remixGraph.destroy();
          if (cachedRemixData != null) {
            document.addEventListener('gesturestart', blockEventListener);
            document.ontouchmove = blockEventListener;
            var networkBuilder = new NetworkBuilder(programID, "remix-graph-layer", remixGraphTranslations, cachedRemixData);
            var networkDescription = networkDirector.construct(networkBuilder);
            remixGraph.render(loadingAnimation, networkDescription);
          } else {
            $.ajax({
              url: "{{ path('program_remix_graph', { 'id' : program.id }) }}",
              type: "get",
              success: function(remixData) {
                cachedRemixData = remixData;
                document.addEventListener('gesturestart', blockEventListener);
                document.ontouchmove = blockEventListener;
                var networkBuilder = new NetworkBuilder(programID, "remix-graph-layer", remixGraphTranslations, remixData);
                var networkDescription = networkDirector.construct(networkBuilder);
                remixGraph.render(loadingAnimation, networkDescription);
              },
              error: function(data) {
                alert("Unable to fetch remix-graph!");
              }
            });
          }
          console.log("The animation was called");
        },
        afterOpen: function() {
          loadingAnimation.show();
          console.log("The animation is completed");
        },
        beforeClose: function() {
          console.log("The animation was called");
          loadingAnimation.hide();
        },
        afterClose: function() {
          console.log("The animation is completed");
          document.removeEventListener('gesturestart', blockEventListener);
          document.ontouchmove = null;
        }
      });
      $(document).on("click", "#show-more-button", function() {
        counter += 10;
        for(var i = counter - 10; i < counter && i < {{ (program_details.commentsLength) }}; i++)
        {
          $('.single-comment.hidden').first().removeClass("hidden");
        }
        if(!$('.single-comment.hidden').length){
          $('.show-more').hide();
        }
      });

      $(document).on("click", "#remix-graph-button", function() {
          $("#remix-graph-modal-link").click();
      });

      $(document).on("click", "a.program-like-button", function(event) {
          event.preventDefault();
          var type = $(this).attr("data-like-type");
          var url = "{{ path('program_like', { 'id' : program.id }) }}?type=" + type;
          var username = "{{ user_name }}";
          if (username == "") {
              window.location.href = url;
              return false;
          }

          $("#program-like-detail-container").text("{{ "pleaseWait"|trans({}, "catroweb") }}");
          $("a.program-like-button").removeClass("selected");
          $(this).addClass("selected");

          $.ajax({
              url: url,
              type: "get",
              data: { type: type },
              success: function(data) {
                  if (data.statusCode != {{ constant('Catrobat\\AppBundle\\StatusCode::OK') }}) {
                      if (data.statusCode == {{ constant('Catrobat\\AppBundle\\StatusCode::LOGIN_ERROR') }}) {
                          window.location.href = url;
                          return;
                      }
                      alert("something went wrong");
                      $(this).removeClass("selected");
                      return;
                  }
                  updateLikeCount(data.data.likeType, data.data.likeTypeCount, data.data.totalLikeCount);
              },
              error: function(data) {
                  alert("something went terribly wrong");
                  $(this).removeClass("selected");
              }
          });
          return false;
      });

      $(document).on("click", "#nolb-submission-button", function() {
         var username = "{{ user_name }}";
         var programURL = "{{ program_url }}";
         var projectID = $('#nolb-submission-project-id').val();

        if(projectID == ''){
          $('#nolb-submission-project-id').addClass('text-area-empty');
          return;
        }
        $('#nolb-submission-project-id').removeClass('text-area-empty');

         var xhr = $.ajax({
             type: "POST",
             crossDomain: true,
             url: "https://www.pmdnolb.cloud/?r=service/upload_program",
             data: JSON.stringify({username: username, PID: projectID, progurl: programURL}),
             success: function(data){
               var response = JSON.parse(data);
               if(response.code == 1) {
                 $('#nolb-submission-successful').show();
               }
               else {
                 $('#nolb-submission-failed').show();
               }

             },
             error: function() {
             }
         });
         $('#nolb-submission-box').hide();
      });


      $(document).on("click", "#nolb-submission-successful-ok", function(){
        $('#nolb-submission-successful').hide();
      });

      $(document).on("click", "#nolb-submission-failed-ok", function(){
        $('#nolb-submission-failed').hide();
      });

      $(document).on("click", "#nolb-project-button", function(){
          $('#nolb-submission-box').show();
      });

      $(document).on("click", "#nolb-submission-box-cancel", function(){
          $('#nolb-submission-box').hide();
      });

      $(document).on("click", ".delete-button", function() {
        var pId = {{ program_details.id }};
        var commentId = $(this).data('commentid');
        $.ajax({
          url:"../delete",
          type: "get",
          data:{ProgramId: pId, CommentId: commentId},
          success: function(data) {
            if (data == "log_in")
              window.location.href = "../login";
            else if (data == "no_admin"){
              alert("You have no admin rights. Please Log in as an Admin");
            }
            else {
              $('#comments-wrapper').load(' #comments-wrapper');
              $('.msg').val("");
            }
          },
          error: function(data) {
            alert("something went terribly wrong");
          }});
      });

      $(document).on("click", "#post-button", function() {
        var msg = $('.msg').val();
        if(msg.length == 0) {
          return;
        }
        var pId = {{ program_details.id }};
        $.ajax({
          url: "../comment",
          type: "post",
          data:{Message: msg, ProgramId: pId},
          success: function(data) {
            if (data == "log_in")
              window.location.href = "../login";
            else
            {
              $('#comments-wrapper').load(' #comments-wrapper');
              $('.msg').val("");
            }
          },
          error: function() {
            alert("something went terribly wrong");
          }});
      });

      $(document).on("click", ".report-button", function() {
        var commentId = $(this).data('commentid');
        var pId = {{ program_details.id }};
        $.ajax({
          url:"../report",
          type: "get",
          data:{ProgramId: pId, CommentId: commentId},
          success: function(data) {
            if (data == "log_in")
              window.location.href = "../login";
            else {
              $('#comment-successfully-reported').show();
            }
          },
          error: function(data) {
            alert("something went terribly wrong");
          }});
      });

      $(document).on("click", "#close-reported-popup", function() {
        $('#comment-successfully-reported').hide();
      });

      $(document).one('click', ".rec-programs", function(event) {

        event.preventDefault();

        var href = $(this).attr('href');
        var type = "no type";
        var additions = 0;

        if (href.indexOf("tag") > 0) {
          type = "tags";
          additions = (href.match(/[0-9]+/))[0];
        }
        else if (href.indexOf("extension") > 0) {
          type = "extensions";
          var list = href.split("/");
          additions = list[list.length-1];
        }
        else if (href.indexOf("program") > 0) {
          type = "programs";
          additions = (href.match(/[0-9]+/))[0];

          var containerElement = $(this).parent(".program").parent(".programs").parent();
          if (containerElement.attr("id") == "specific-programs-recommendations") {
              type = "rec_specific_programs";
          }
        }

        $.ajaxSetup({async: false});
        $.post("{{ path('click_stats') }}", {type: type, recFromID: {{ program.id }}, recID: additions}, function( data ) {
          if (data == 'error')
            console.log("No click statistic is created!");
        }).fail(function (data) {
            console.log(data);
        });

        window.location.href = href;

        {#$.ajax({#}
          {#url:"../click-statistic",#}
          {#type: "post",#}
          {#data:{type: type, recFromID: {{ program.id }}, recID: additions},#}
          {#success: function(data) {#}
            {#if (data == 'error')#}
              {#console.log("No click statistic is created!");#}
          {#},#}
          {#error: function(data) {#}
            {#console.log("Connection problem!");#}
          {#}#}
        {#});#}

      });
    });


    $(function(){
        $(".fab,.backdrop").click(function(){
            if($(".backdrop").is(":visible")){
                $(".backdrop").fadeOut(125);
                $("#action-arrow").removeClass("fa-angle-down");
                $("#action-arrow").addClass("fa-angle-up");
                $(".fab.child")
                    .stop()
                    .animate({
                        bottom  : $("#masterfab").css("bottom"),
                        opacity : 0
                    },125,function(){
                        $(this).hide();
                    });
            }else{
                $(".backdrop").fadeIn(125);
                $("#action-arrow").removeClass("fa-angle-up");
                $("#action-arrow").addClass("fa-angle-down");
                $(".fab.child").each(function(){
                    $(this)
                        .stop()
                        .show()
                        .animate({
                            bottom  : (parseInt($("#masterfab").css("bottom")) + parseInt($("#masterfab").outerHeight())
                            + 70 * $(this).data("subitem") - $(".fab.child").outerHeight()) + "px",
                            opacity : 1
                        },125);
                });
            }
        });
    });
  </script>
{% endblock %}
