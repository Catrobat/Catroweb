# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ** Deployment **
#
#  Test deployments are handled by a python script that run on a schedule: https://github.com/Catrobat/Catroweb-API
#  However, the deployment to production is handled by this workflow.
#
#  - Secrets required!
#
name: Deployment

# Run-on every merge of a pull request into the master branch
on:
  push:
    branches:
      - master

# The concurrency: production_environment is important as it prevents concurrent deploys.
concurrency: production_environment

jobs:
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Deployment:
  #
  #  - requires a VPN connection to the TU Graz. (SSH is only allowed inside the university network)
  #  - a SSH connection is required (public key must be registered on server!)
  #  - Add all credentials hidden in secrets to the configuration files
  #  - The current script is build within the Symfony framework, hence, the container is used to run the script.
  #
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Setup PHP and composer packages'
        uses: ./.github/actions/setup-php-composer

      # Kept in case the VPN config switches again...
      #          printf 'TUGraz-Angehoerige\n${{ secrets.VPN_PASSWD }}' | sudo openconnect vpn.tugraz.at --user=${{ secrets.VPN_USER }} & disown
      - name: Connect to TUG via VPN
        run: |
          sudo apt-get --yes --force-yes install openconnect
          printf '${{ secrets.VPN_PASSWD }}' | sudo openconnect vpn.tugraz.at --user=${{ secrets.VPN_USER }} & disown

      - name: Set deployment script secrets (.env.local)
        run: |
          printf '\nDEPLOY_GIT=https://github.com/Catrobat/Catroweb-Symfony.git\n' >> .env.local
          printf 'SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}\n' >> .env.local
          printf 'DEP_USER="Catroweb Github Action"\n' >> .env.local
          printf 'DEPLOY_SHARE=${{ secrets.DEPLOY_SHARE }}\n' >> .env.local
          printf 'DEPLOY_SHARE_BRANCH="master"\n' >> .env.local

      - name: Deploy Share
        uses: deployphp/action@v1
        with:
          private-key: ${{ secrets.DEPLOY_SHARE_SSH_KEY }}
          dep: deploy stage=share
          deployer-binary: 'bin/dep'
