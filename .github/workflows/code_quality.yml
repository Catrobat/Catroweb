# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ** Static analysis **
#
#  This GitHub Action requires every pull request to fulfill the minimum requirements at all times. Various static
#  analysis tools are included and executed during this workflow. They only check out the source code without the need
#  to run the whole Share community platform. Hence, this automated static analysis checks are fast.  Besides, no tests
#  have to be created manually. However, no behavior can be tested.
#
#  - This tests must never fail!:
#
#      We should never allow those checks to fail before merging a pull request. Having failing pipelines over a more
#      extended period results in developers and code reviewers to ignore those checks, which again results in more and
#      more errors over time. If necessary, it is better to reduce the strictness of some checks in the corresponding
#      config files, or explicitly tell the tools to ignore a particular pattern or line.
#
#  - Tool integration:
#
#       Most tools are integrated directly using a package manager (npm, composer). This allows to Dependabot to update
#       the dependencies of the GitHub Actions. Besides, the CI system uses the same versions like developers would
#       locally. However, this approach also a a drawback. More "artificial" dependencies on the static analysis tools
#       which are not necessary to run the Share community platform. In case, one they there arise dependency conflicts
#       just remove the tool from the package manager and add the tool using a pre-built executable (wget) or an action
#       from the marketplace (This is already the case or This is already the case for `phploc` and `phpcpd`.)
#
#  - Caching:
#
#      By caching the third party code installed by package manager, the build time can be significantly reduced.
#
#   - Composites:
#
#      By using composites to build the jobs, a lot of duplicated code can be prevent.
#      ToDo: As soon as Github Action have `uses` support use composites to prevent the duplicated (build/cache) code
#      (https://github.com/actions/runner/issues/646)
#
name: "Static analysis"

# Run-on every creation, update and merge of a pull request.
# However, prevent checks to be initiated twice if the pull request origins from a branch on the official repository.
# For example, this happens with dependabot.
on:
  push:
    branches:
      - master
      - l10n_crowdin_action # translation updates
  pull_request:


jobs:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** Javascript **
  #
  # Eslint:
  #  - Statically analyzes javascript code (depends on on node and npm)
  #  - Config defined in .eslintrc.yml
  #  - Automatic fix support
  #  - More information at: (https://eslint.org/)
  #
  eslint:
    name: JavaScript [ESLint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      # Download and set up node (caching is enabled)
      - uses: actions/setup-node@v2.2.0
        with:
          node-version: '10.x'  # optional

      # Optional - improve performance by caching
      - id: npm-cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Only install modules if there is no cache hit
      - if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      # Run the checks -> test script must be defined in package.json
      - run: npm run test


  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** Sass,CSS **
  #
  # StyleLint:
  #  - Statically analyzes Sass and css files (depends on on node and npm)
  #  - Config defined in .stylelintrc.json
  #  - Automatic fix support
  #  - More information at: https://stylelint.io/
  #
  stylelint:
    name: Sass,CSS [StyleLint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      # Download and set up node (caching is enabled)
      - uses: actions/setup-node@v2.2.0
        with:
          node-version: '10.x'  # optional

      # Optional - improve performance by caching
      - id: npm-cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Only install modules if there is no cache hit
      - if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      # Run the checks -> test-style script msut be defined in package.json
      - run: npm run test-style



  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** PHP **
  #

  #
  # Php-CS-Fixer:
  #  - Reports code style issues in php files
  #  - config defined in .php_cs(.dist)
  #  - More information at: https://github.com/FriendsOfPHP/PHP-CS-Fixer
  #
  php-cs-fixer:
    name: PHP Code Style [Php-CS-Fixer]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick
      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: PHP_CS_FIXER_IGNORE_ENV=1 php bin/php-cs-fixer fix --diff --dry-run --allow-risky=yes --verbose --format=txt
  #
  # PhpStan:
  #
  #  - Statically analyzes php files (The more strongly-typed the code is, the more information we get)
  #  - config defined in phpstan.neon(.dist) (8 different levels!)
  #  - More information at: https://phpstan.org/
  #
  #  - Why use both PhpStan and Psalm? In their current state they are able to find different possible problems.
  #
  phpstan:
    name: PHP Static Analysis [Php-Stan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick

      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/phpstan analyze
  #
  # Psalm:
  #
  #  - Statically analyzes php files (The more strongly-typed the code is, the more information we get)
  #  - config defined in psalm.xml(.dist) (8 different levels!)
  #  - More information at: https://psalm.dev/
  #
  #  - Why use both PhpStan and Psalm? In their current state they are able to find different possible problems.
  #
  psalm:
    name: PHP Static Analysis [Psalm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Setup PHP 7.4
        uses: shivammathur/setup-php@2.12.0
        with:
          php-version: 7.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt update
          sudo apt install php-imagick

      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/psalm
  #
  # phpcpd (Php Copy Paste Detector):
  #
  #  - Checking for PHP code that was just copied
  #  - More information at: https://github.com/sebastianbergmann/phpcpd
  #
  phpcpd:
    name: PHP Static Analysis [PhpCPD]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: PHP Copy Paste Detector
        uses: StephaneBour/actions-php-cpd@8.0
        with:
          args: src tests
  #
  # phpdd (Php Code Fixer):
  #
  #  - to search issues with deprecated functionality in newer interpreter versions..
  #  - More information at: https://github.com/wapmorgan/PhpDeprecationDetector
  #
  phpdd:
    name: PHP Static Analysis [Phpdd]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick
      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/phpdd src tests
  #
  # PhpLoc:
  #
  #  - Measuring the size and analyzing the structure of the project (php)
  #  - More information at: https://github.com/sebastianbergmann/phploc
  #
  php-loc:
    name: PHP Info [PhpLoc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - run: wget https://phar.phpunit.de/phploc.phar
      - run: php phploc.phar src tests

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** Twig **
  #
  #  - Lints a template and outputs encountered errors.
  #
  lint-twig:
    name: Twig [Lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick

      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/console lint:twig templates/

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** YAML **
  #
  #  - Ensures all yaml files contain valid syntax
  #
  lint-yaml:
    name: Yaml [Lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick
      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/console lint:yaml translations/ config/ .github/ docker/ behat.yml.dist .eslintrc.yml

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ** Container**
  #
  #  - Checks the services defined in the container
  #  - Ensures that arguments injected into services match type declarations
  #
  #  Currently broken in Symfony 4 with doctrine. Hopefully fixed again later. Maybe Symfony 5.
  #  https://github.com/symfony/symfony/issues/39259
  #
  lint-container:
    if: 'false' # always skip job
    name: Symfony Container [Lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install dependencies (php-imagick)
        run: |
          sudo apt-get update
          sudo apt-get install php-imagick
      # Optional - ensure composer configuration is valid
      - run: composer validate

      # Optional - improve performance by caching
      - id: composer-cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            vendor
            bin/behat
            bin/phpunit
            bin/phpstan
            bin/php-cs-fixer
            bin/phpdd
            bin/psalm
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Only install packages if there is no cache hit
      - if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - run: bin/console lint:container
