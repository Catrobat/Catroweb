<?php

namespace Catrobat\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProgramRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProgramRepository extends EntityRepository
{
    public function getMostDownloadedPrograms($flavor = 'pocketcode', $limit = 20, $offset = 0)
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
    ->select('e')
    ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
    ->andWhere($qb->expr()->eq('e.flavor', ':flavor'))
    ->orderBy('e.downloads', 'DESC')
    ->setParameter('flavor', $flavor)
    ->setFirstResult($offset)
    ->setMaxResults($limit)
    ->getQuery()
    ->getResult();
    }

    public function getMostViewedPrograms($flavor = 'pocketcode', $limit = 20, $offset = 0)
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
    ->select('e')
    ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
    ->andWhere($qb->expr()->eq('e.flavor', ':flavor'))
    ->orderBy('e.views', 'DESC')
    ->setParameter('flavor', $flavor)
    ->setFirstResult($offset)
    ->setMaxResults($limit)
    ->getQuery()
    ->getResult();
    }

    public function getRecentPrograms($flavor = 'pocketcode', $limit = 20, $offset = 0)
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
    ->select('e')
    ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
    ->andWhere($qb->expr()->eq('e.flavor', ':flavor'))
    ->orderBy('e.uploaded_at', 'DESC')
    ->setParameter('flavor', $flavor)
    ->setFirstResult($offset)
    ->setMaxResults($limit)
    ->getQuery()
    ->getResult();
    }

    public function getRandomPrograms($flavor = 'pocketcode', $limit = 20, $offset = 0)
    {
      // Rand(), newid() and TABLESAMPLE() doesn't exist in the Native Query therefore we have to do a workaround
      // for random results
      if ($offset > 0 && isset($_SESSION['randomProgramIds']))
      {
        $array_program_ids = $_SESSION['randomProgramIds'];
      }
      else
      {
        $array_program_ids = $this->getVisibleProgramIds($flavor);
        shuffle($array_program_ids);
        $_SESSION['randomProgramIds'] = $array_program_ids;
      }

      $array_programs = array();
      $max_element = ($offset + $limit) > count($array_program_ids) ? count($array_program_ids) : $offset + $limit;
      $current_element = $offset;

      while ($current_element < $max_element)
      {
        $array_programs[] = $this->find($array_program_ids[$current_element]);
        $current_element++;
      }

      return $array_programs;
    }

    public function getVisibleProgramIds($flavor)
    {
      $qb = $this->createQueryBuilder('e');

      $result = $qb
        ->select('e.id')
        ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
        ->andWhere($qb->expr()->eq('e.flavor', ':flavor'))
        ->setParameter('flavor', $flavor)
        ->getQuery()
        ->getResult();

      return $result;
    }

    public function search($query, $limit = 10, $offset = 0)
    {
        $em = $this->getEntityManager();
        $metadata = $em->getClassMetadata('Catrobat\AppBundle\Entity\Tag')->getFieldNames();
        array_shift($metadata);

        $searchterm = '';
        $i = 1;

        foreach ($metadata as $language) {
            if ($i == count($metadata)) {
                $searchterm .= '(t.' . $language . ' LIKE :searchterm)';
            } else {
                $searchterm .= '(t.' . $language . ' LIKE :searchterm) OR ';
            }
            $i++;
        }

        $dql = "SELECT e,
          (CASE
            WHEN (e.name LIKE :searchterm) THEN 10
            ELSE 0
          END) +
          (CASE
            WHEN (f.username LIKE :searchterm) THEN 1
            ELSE 0
          END) +
          (CASE
            WHEN (x.name LIKE :searchterm) THEN 7
            ELSE 0
          END) +
          (CASE
            WHEN (e.description LIKE :searchterm) THEN 3
            ELSE 0
          END) +
          (CASE
            WHEN (e.id = :searchtermint) THEN 11
            ELSE 0
          END) +
          (CASE
            WHEN ($searchterm) THEN 7
            ELSE 0
          END)
          AS weight
        FROM Catrobat\AppBundle\Entity\Program e
        LEFT JOIN e.user f
        LEFT JOIN e.tags t
        LEFT JOIN e.extensions x
        WHERE
          (e.name LIKE :searchterm OR
          f.username LIKE :searchterm OR
          e.description LIKE :searchterm OR
          x.name LIKE :searchterm OR
          $searchterm OR
          e.id = :searchtermint) AND
          e.visible = true
        ORDER BY weight DESC, e.uploaded_at DESC
      ";
        $qb_program = $this->createQueryBuilder('e');
        $q2 = $qb_program->getEntityManager()->createQuery($dql);
        $q2->setFirstResult($offset);
        $q2->setMaxResults($limit);
        $q2->setParameter('searchterm', '%'.$query.'%');
        $q2->setParameter('searchtermint', intval($query));
        $result = $q2->getResult();

        return array_map(function ($element) {return $element[0];}, $result);
    }

    public function searchCount($query)
    {

        $em = $this->getEntityManager();
        $metadata = $em->getClassMetadata('Catrobat\AppBundle\Entity\Tag')->getFieldNames();
        array_shift($metadata);

        $searchterm = '';
        foreach ($metadata as $language) {
            $searchterm .= 't.' . $language . ' LIKE :searchterm OR ';
        }

        $qb_program = $this->createQueryBuilder('e');
        $dql = "SELECT e.id
        FROM Catrobat\AppBundle\Entity\Program e
        LEFT JOIN e.user f
        LEFT JOIN e.tags t
        LEFT JOIN e.extensions x
        WHERE
          (e.name LIKE :searchterm OR
          f.username LIKE :searchterm OR
          e.description LIKE :searchterm OR
          x.name LIKE :searchterm OR
          $searchterm
          e.id = :searchtermint) AND
          e.visible = true
          GROUP BY e.id
      ";
        $q2 = $qb_program->getEntityManager()->createQuery($dql);
        $q2->setParameter('searchterm', '%'.$query.'%');
        $q2->setParameter('searchtermint', intval($query));
        $result = $q2->getResult();
        return count($result);
    }

    public function getUserPrograms($user_id)
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
    ->select('e')
    ->leftJoin('e.user', 'f')
    ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
    ->andWhere($qb->expr()->eq('f.id', ':user_id'))
    ->setParameter('user_id', $user_id)
    ->getQuery()
    ->getResult();
    }

    public function getTotalPrograms($flavor = 'pocketcode')
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
          ->select('COUNT (e.id)')
          ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
          ->andWhere($qb->expr()->eq('e.flavor', ':flavor'))
          ->setParameter('flavor', $flavor)
          ->getQuery()
          ->getSingleScalarResult();
    }

    public function getProgramsWithApkStatus($apk_status)
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
          ->select('e')
          ->where($qb->expr()->eq('e.apk_status', ':apk_status'))
          ->setParameter('apk_status', $apk_status)
          ->getQuery()
          ->getResult();
    }

    public function getProgramsWithExtractedDirectoryHash()
    {
        $qb = $this->createQueryBuilder('e');

        return $qb
          ->select('e')
          ->where($qb->expr()->isNotNull('e.directory_hash'))
          ->getQuery()
          ->getResult();
    }

    public function getProgramsByTagId($id, $limit = 20, $offset = 0)
    {
        $qb = $this->createQueryBuilder('e');
        return $qb
            ->select('e')
            ->leftJoin('e.tags', 'f')
            ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
            ->andWhere($qb->expr()->eq('f.id', ':id'))
            ->setParameter('id', $id)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function getProgramsByExtensionName($name, $limit = 20, $offset = 0)
    {
        $qb = $this->createQueryBuilder('e');
        return $qb
            ->select('e')
            ->leftJoin('e.extensions', 'f')
            ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
            ->andWhere($qb->expr()->eq('f.name', ':name'))
            ->setParameter('name', $name)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
    
    public function searchTagCount($query)
    {
        $qb = $this->createQueryBuilder('e');

        $result = $qb
            ->select('e')
            ->leftJoin('e.tags', 't')
            ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
            ->andWhere($qb->expr()->eq('t.id', ':id'))
            ->setParameter('id', $query)
            ->getQuery()
            ->getResult();

        return count($result);
    }

    public function searchExtensionCount($query)
    {
        $qb = $this->createQueryBuilder('e');

        $result = $qb
            ->select('e')
            ->leftJoin('e.extensions', 't')
            ->where($qb->expr()->eq('e.visible', $qb->expr()->literal(true)))
            ->andWhere($qb->expr()->eq('t.name', ':name'))
            ->setParameter('name', $query)
            ->getQuery()
            ->getResult();

        return count($result);
    }
}
