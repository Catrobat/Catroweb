<?php
/**
 * NotificationsCountResponse
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Catroweb API
 *
 * API for the Catrobat Share Platform
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: webmaster@catrobat.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the NotificationsCountResponse model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class NotificationsCountResponse 
{
        /**
     * @var int|null
     * @SerializedName("total")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $total = null;

    /**
     * @var int|null
     * @SerializedName("like")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $like = null;

    /**
     * @var int|null
     * @SerializedName("follower")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $follower = null;

    /**
     * @var int|null
     * @SerializedName("comment")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $comment = null;

    /**
     * @var int|null
     * @SerializedName("remix")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $remix = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->total = array_key_exists('total', $data) ? $data['total'] : $this->total;
            $this->like = array_key_exists('like', $data) ? $data['like'] : $this->like;
            $this->follower = array_key_exists('follower', $data) ? $data['follower'] : $this->follower;
            $this->comment = array_key_exists('comment', $data) ? $data['comment'] : $this->comment;
            $this->remix = array_key_exists('remix', $data) ? $data['remix'] : $this->remix;
        }
    }

    /**
     * Gets total.
     *
     * @return int|null
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }



    /**
     * Sets total.
     *
     * @param int|null $total
     *
     * @return $this
     */
    public function setTotal(?int $total = null): self
    {
        $this->total = $total;

        return $this;
    }

    /**
     * Gets like.
     *
     * @return int|null
     */
    public function getLike(): ?int
    {
        return $this->like;
    }



    /**
     * Sets like.
     *
     * @param int|null $like
     *
     * @return $this
     */
    public function setLike(?int $like = null): self
    {
        $this->like = $like;

        return $this;
    }

    /**
     * Gets follower.
     *
     * @return int|null
     */
    public function getFollower(): ?int
    {
        return $this->follower;
    }



    /**
     * Sets follower.
     *
     * @param int|null $follower
     *
     * @return $this
     */
    public function setFollower(?int $follower = null): self
    {
        $this->follower = $follower;

        return $this;
    }

    /**
     * Gets comment.
     *
     * @return int|null
     */
    public function getComment(): ?int
    {
        return $this->comment;
    }



    /**
     * Sets comment.
     *
     * @param int|null $comment
     *
     * @return $this
     */
    public function setComment(?int $comment = null): self
    {
        $this->comment = $comment;

        return $this;
    }

    /**
     * Gets remix.
     *
     * @return int|null
     */
    public function getRemix(): ?int
    {
        return $this->remix;
    }



    /**
     * Sets remix.
     *
     * @param int|null $remix
     *
     * @return $this
     */
    public function setRemix(?int $remix = null): self
    {
        $this->remix = $remix;

        return $this;
    }
}


