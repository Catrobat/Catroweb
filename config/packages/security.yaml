security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    password_hashers:
        Sonata\UserBundle\Model\UserInterface: auto

    providers:
        chain_provider:
            chain:
                providers: [sonata_userbundle]
        sonata_userbundle:
            id: sonata.user.security.user_provider

    firewalls:

        #
        # API V2
        #
        #  - Token creation & login is handled by the LexikJWTAuthenticationBundle
        #  - Protected API calls need to pass through the authenticator
        #
        api_authentication_login:
            provider: chain_provider
            pattern:  ^/api/authentication
            methods: [POST]
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/authentication
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_authentication_check_token:
            provider: chain_provider
            pattern: ^/api/authentication
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_authentication_delete_token:
            provider: chain_provider
            pattern: ^/api/authentication
            methods: [DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_authentication_refresh_token:
            pattern: ^/api/authentication/refresh
            stateless: true
            anonymous: true
            methods: [POST]

        api_authentication_oauth_login:
            provider: chain_provider
            pattern:  ^/api/authentication/oauth
            methods: [POST]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        api_user:
            provider: chain_provider
            pattern: ^/api/user$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_user_delete:
            provider: chain_provider
            pattern: ^/api/user$
            methods: [DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_user_update:
            provider: chain_provider
            pattern: ^/api/user$
            methods: [PUT]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_projects_upload:
            provider: chain_provider
            pattern: ^/api/projects
            methods: [POST]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_projects_user:
            provider: chain_provider
            pattern: ^/api/projects/user$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_project_delete_id:
            provider: chain_provider
            pattern: ^/api/project/.+?$
            methods: [ DELETE ]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_notifications_count:
            provider: chain_provider
            pattern: ^/api/notifications/count
            methods: [ GET ]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_notifications_id_read:
            provider: chain_provider
            pattern: ^api/notification/.+?/read$
            methods: [ PUT ]
            stateless: true
            guard:
              authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator

        api_notifications_read:
            provider: chain_provider
            pattern: ^/api/notifications/read
            methods: [ PUT ]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        #
        # API V1 deprecated
        #
        api_checktoken:
            provider: chain_provider
            pattern: ^.*?/api/checkToken/check.json
            stateless: true
            guard:
                authenticators:
                    - App\Api_deprecated\Security\ApiTokenAuthenticator
        api_upload:
            provider: chain_provider
            pattern: ^.*?/api/upload/upload.json
            stateless: true
            guard:
                authenticators:
                    - App\Api_deprecated\Security\ApiTokenAuthenticator

        debug:
            provider: chain_provider
            pattern: ^/debug
            security: false

        main:
            pattern: ^/(?!(api/))
            provider: chain_provider
            stateless: true
            form_login:
                default_target_path: /
            anonymous: true
            guard:
                authenticators:
                    - App\Security\Authentication\WebView\WebviewAuthenticator     # @deprecated v1
                    - App\Security\Authentication\WebView\WebviewJWTAuthenticator
                entry_point: App\WebView\WebviewJWTAuthenticator
            oauth:
                remember_me: true
                resource_owners:
                    google:             "/login/check-google"
                    facebook:           "/login/check-facebook"
                    apple:              "/login/check-apple"
                login_path:        /login
                use_forward:       false
                failure_path:      /app/login
                success_handler: catroweb.oauth_success_listener

                oauth_user_provider:
                    service: my.oauth_aware.user_provider.service

        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            provider: chain_provider
            security: false
            form_login:
                always_use_default_target_path: true
                default_target_path: /user
            logout:       true
            anonymous:    true


    access_control:
        # JWTRefreshTokenBundle
        - { path: ^/api/authentication/refresh, roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

        # The WDT has to be allowed to anonymous users to avoid requiring the login with the AJAX request
        - { path: ^/wdt/, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/profiler/, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

        # AsseticBundle paths used when using the controller for assets
        - { path: ^/js/, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/css/, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/register, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/resetting, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN], requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/.*, role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

        # Only specific admin rights
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN], requires_channel: '%env(SECURE_SCHEME)%' }

    # Sonata "special" roles; Super Admin has all rights
    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_SONATA_ADMIN
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH

        # Define custom roles here; all catroweb blocks can be found in the admin interface
        ROLE_FEATURED:
            - ROLE_ADMIN_BLOCK_FEATURED_PROGRAM_ADMIN
            - ROLE_ADMIN_BLOCK_PROGRAMS_CATEGORIES_ADMIN
            - ROLE_ADMIN
        ROLE_APPROVE:
            - ROLE_ADMIN_BLOCK_PROGRAMS_ALL_ADMIN
            - ROLE_ADMIN_BLOCK_PROGRAMS_APPROVE_ADMIN
            - ROLE_ADMIN_BLOCK_PROGRAMS_REPORTED_ADMIN
            - ROLE_ADMIN_BLOCK_PROGRAMS_COMMENTS_ADMIN
            - ROLE_ADMIN
        ROLE_MEDIAPACKAGE:
            - ROLE_ADMIN_BLOCK_MEDIAPACKAGE_FILE_ADMIN
            - ROLE_ADMIN_BLOCK_MEDIAPACKAGE_CATEGORY_ADMIN
            - ROLE_ADMIN_BLOCK_MEDIAPACKAGE_PACKAGE_ADMIN
            - ROLE_ADMIN
        ROLE_STATISICS:
            - ROLE_ADMIN_BLOCK_STATISTICS_PROJECT_MACHINE_TRANSLATION_ADMIN
            - ROLE_ADMIN_BLOCK_STATISTICS_PROJECT_CUSTOM_TRANSLATION_ADMIN
            - ROLE_ADMIN_BLOCK_STATISTICS_COMMENT_MACHINE_TRANSLATION_ADMIN
            - ROLE_ADMIN

acl:
    connection: default

