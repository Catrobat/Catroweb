security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        FOS\UserBundle\Model\UserInterface: auto

    providers:
        chain_provider:
            chain:
                providers: [fos_userbundle]
        fos_userbundle:
            id: fos_user.user_provider.username

    firewalls:

        #
        # API V2
        #
        #  - Token creation & login is handled by the LexikJWTAuthenticationBundle
        #  - Protected API calls need to pass through the authenticator
        #
        api_authentication_login:
            provider: chain_provider
            pattern:  ^/api/authentication
            methods: [POST]
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/authentication
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_authentication_check_token:
            provider: chain_provider
            pattern: ^/api/authentication
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_projects_upload:
            provider: chain_provider
            pattern: ^/api/projects
            methods: [POST]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_projects_user:
            provider: chain_provider
            pattern: ^/api/projects/user$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        #
        # API V1 deprecated
        #
        api_checktoken:
            provider: chain_provider
            pattern: ^.*?/api/checkToken/check.json
            stateless: true
            simple_preauth:
                authenticator: App\Catrobat\Security\ApiKeyAuthenticator

        api_upload:
            provider: chain_provider
            pattern: ^.*?/api/upload/upload.json
            stateless: true
            simple_preauth:
                authenticator: App\Catrobat\Security\ApiKeyAuthenticator

        api_submit:
            provider: chain_provider
            pattern: ^.*?/api/gamejam/submit.json
            stateless: true
            simple_preauth:
                authenticator: App\Catrobat\Security\ApiKeyAuthenticator


        debug:
            provider: chain_provider
            pattern: ^/debug
            security: false

        main:
            pattern: ^/(?!(api/))
            provider: chain_provider
            form_login:
                login_path: login
                check_path: fos_user_security_check
                default_target_path: /
            logout: true
            anonymous: true
            remember_me:
                name: remember_me
                secret: '%env(APP_SECRET)%'
                lifetime: 31536000 # 365 days in seconds
                path: /
                domain: ~ # Defaults to the current domain from $_SERVER
                secure: false
                httponly: false
            guard:
                authenticators:
                    - App\Catrobat\Security\WebviewAuthenticator     # @deprecated API v1
                    - App\Catrobat\Security\WebviewJWTAuthenticator
                entry_point: App\Catrobat\Security\WebviewJWTAuthenticator

        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            provider: chain_provider
            security: false
            form_login:
                always_use_default_target_path: true
                default_target_path: /user
            logout:       true
            anonymous:    true


    access_control:

        # The WDT has to be allowed to anonymous users to avoid requiring the login with the AJAX request
        - { path: ^/wdt/, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/profiler/, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

        # AsseticBundle paths used when using the controller for assets
        - { path: ^/js/, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/css/, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN], requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

        # Only specific admin rights
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN], requires_channel: '%env(SECURE_SCHEME)%' }

    # Sonata "special" roles; Super Admin has all rights
    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_SONATA_ADMIN
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH

        # Define custom roles here; all catroweb blocks can be found in the admin interface
        ROLE_FEATURED:
            - ROLE_CATROWEBADMIN_BLOCK_FEATURED_PROGRAM_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_FEATURED_URL_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_PROGRAMS_CATEGORIES_ADMIN
            - ROLE_ADMIN
        ROLE_APPROVE:
            - ROLE_CATROWEBADMIN_BLOCK_PROGRAMS_ALL_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_PROGRAMS_APPROVE_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_PROGRAMS_REPORTED_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_PROGRAMS_COMMENTS_ADMIN
            - ROLE_ADMIN
        ROLE_MEDIAPACKAGE:
            - ROLE_CATROWEBADMIN_BLOCK_MEDIAPACKAGE_FILE_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_MEDIAPACKAGE_CATEGORY_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_MEDIAPACKAGE_PACKAGE_ADMIN
            - ROLE_ADMIN
        ROLE_GAMEJAM_ADMIN:
            - ROLE_CATROWEBADMIN_BLOCK_USERS_LIMITED_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_GAMEJAM_ADMIN
            - ROLE_CATROWEBADMIN_BLOCK_GAMEJAM_SUBMITTED_ADMIN
            - ROLE_ADMIN

acl:
    connection: default

