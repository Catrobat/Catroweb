# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  catrobat.apk.dir:                     "%catrobat.pubdir%resources/apk/"
  catrobat.featuredimage.dir:           "%catrobat.pubdir%resources/featured/"
  catrobat.featuredimage.path:          "resources/featured/"
  catrobat.exampleimage.dir:            "%catrobat.pubdir%resources/example/"
  catrobat.exampleimage.path:           "resources/example/"
  catrobat.file.extract.dir:            "%kernel.project_dir%/public/resources/extract/"
  catrobat.file.extract.path:           "resources/extract/"
  catrobat.file.storage.dir:            "%kernel.project_dir%/public/resources/programs/"
  catrobat.file.storage.path:           "resources/programs/"
  catrobat.logs.dir:                    "%kernel.project_dir%/var/log/"
  catrobat.max_name_upload_size: 50
  catrobat.max_description_upload_size: 10000 # also change in src/Catrobat/Listeners/DescriptionValidator.php
  catrobat.max_notes_and_credits_upload_size:     3000
  catrobat.mediapackage.dir:            "%catrobat.pubdir%resources/mediapackage/"
  catrobat.mediapackage.path:           "resources/mediapackage/"
  catrobat.mediapackage.sample.dir:     "%catrobat.pubdir%tests/TestData/DataFixtures/MediaPackage/SampleMediaPackage/"
  catrobat.mediapackage.sample.path:    "tests/TestData/DataFixtures/MediaPackage/SampleMediaPackage/"
  catrobat.mediapackage.font.dir:  "%catrobat.pubdir%webfonts/fa-solid-900.ttf"
  catrobat.mediapackage.font.path: "webfonts/fa-solid-900.ttf"
  catrobat.pubdir:                      "%kernel.project_dir%/public/"
  catrobat.resources.dir:               "%kernel.project_dir%/public/resources/"
  catrobat.screenshot.dir:              "%catrobat.pubdir%resources/screenshots/"
  catrobat.screenshot.path:             "resources/screenshots/"
  catrobat.template.dir:                "%catrobat.pubdir%resources/templates/"
  catrobat.template.path:               "resources/templates/"
  catrobat.template.screenshot.dir:     "%catrobat.pubdir%resources/templates/screenshots/"
  catrobat.template.screenshot.path:    "resources/templates/screenshots/"
  catrobat.template.storage.dir:        "%kernel.project_dir%/public/resources/templates/"
  catrobat.template.storage.path:       "resources/templates/"
  catrobat.template.thumbnail.dir:      "%catrobat.pubdir%resources/templates/thumbnails/"
  catrobat.template.thumbnail.path:     "resources/templates/thumbnails/"
  catrobat.test.directory.source:       "%kernel.project_dir%/tests/TestData/DataFixtures/"
  catrobat.test.directory.target:       "%kernel.project_dir%/tests/TestData/DataFixtures/GeneratedFixtures/"
  catrobat.thumbnail.dir:               "%catrobat.pubdir%resources/thumbnails/"
  catrobat.thumbnail.path:              "resources/thumbnails/"
  catrobat.translations.dir:            "%kernel.project_dir%/translations"
  catrobat.translations.project_cache_threshold: 15
  catrobat.upload.temp.dir:             "%catrobat.pubdir%resources/tmp/uploads/"
  catrobat.upload.temp.path:            "resources/tmp/uploads/"
  es_host:                              "%env(ES_HOST)%"
  es_port:                              "%env(ES_PORT)%"
  dkim.private.key:                     "%kernel.project_dir%/.dkim/private.key"

  #      This can drastically improve DX by reducing the time to load classes
  container.dumper.inline_class_loader: true


services:

  security.acl.permission.map:
    class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    #
    # setup special, global auto wiring rules:
    #
    #   Here one can bind variable names to specific parameters or services. This allows dependency injection
    #   of specific strings or classes. E.g $kernel_root_dir used as parameter in an constructor signals the
    #   dependency service that the "kernel.root_dir" parameter string must be injected.
    #
    #   It is also possible to inject the ParameterBagInterface with which one has easy access to all defined parameters
    #
    bind:
      $kernel_root_dir: "%kernel.root_dir%"
      $catrobat_translation_dir: "%catrobat.translations.dir%"
      $catrobat_file_storage_dir: "%catrobat.file.storage.dir%"
      $catrobat_file_extract_dir: "%catrobat.file.extract.dir%"
      $program_finder: '@fos_elastica.finder.app_program'
      $user_finder: '@fos_elastica.finder.app_user'
      $refresh_token_ttl: '%lexik_jwt_authentication.token_ttl%'
      $dkim_private_key_path: "%dkim.private.key%"


  # ====================================================================================================================
  #  Catrobat:
  #              makes classes in src available to be used as services
  #              this creates a service per class whose id is the fully-qualified class name
  #
  #              Repositories and Managers need to be public!
  #
  App\DB\EntityRepository\:
    resource: '../src/DB/EntityRepository/*'
    public: true

  App\Api\Services\:
    resource: '../src/Api/Services/*'
    public: true

  App\User\UserManager:
    class: App\User\UserManager
    public: true

  App\Project\ProgramManager:
    class: App\Project\ProgramManager
    public: true

  App\System\Commands\Helpers\RemixManipulationProgramManager:
    class: App\System\Commands\Helpers\RemixManipulationProgramManager
    public: true

  App\Project\Remix\RemixGraphManipulator:
    class: App\Project\Remix\RemixGraphManipulator
    public: true

  App\Project\Remix\RemixSubgraphManipulator:
    class: App\Project\Remix\RemixSubgraphManipulator
    public: true

  # ====================================================================================================================
  #   Controllers:
  #                  controllers are imported separately to make sure they're public
  #                  and have a tag that allows actions to type-hint services
  #
  App\Application\Controller\:
    resource: '../src/Application/Controller'
    public: true

  App\Api_deprecated\Controller\:
    resource: '../src/Api_deprecated/Controller'
    public: true

  App\Admin\Users\UserDataReport\UserDataReportController:
    class: App\Admin\Users\UserDataReport\UserDataReportController
    public: true

  App\Admin\ApkGeneration\ApkController:
    class: App\Admin\ApkGeneration\ApkController
    public: true

  App\Admin\Tools\Maintenance\MaintainController:
    class: App\Admin\Tools\Maintenance\MaintainController
    public: true

  App\Admin\Tools\SendMailToUser\SendMailToUserController:
    class: App\Admin\Tools\SendMailToUser\SendMailToUserController
    public: true

  App\Admin\Tools\BroadcastNotification\BroadcastNotificationController:
    class: App\Admin\Tools\BroadcastNotification\BroadcastNotificationController
    public: true

  App\Admin\DB_Updater\Controller\:
    resource: '../src/Admin/DB_Updater/Controller'
    public: true

  App\Admin\Statistics\Translation\Controller\:
    resource: '../src/Admin/Statistics/Translation/Controller'
    public: true

  # ====================================================================================================================
  #   Commands:
  #               need a console tag; make sure all commands are in the correct folder and extend Command
  #
  App\System\Commands\:
    resource: '../src/System/Commands'
    exclude: '../src/System/Commands/Helpers'
    tags:
      - { name: console.command }


  # ====================================================================================================================
  #   Services:
  #                most services need to be public (mainly for testing -> easy access in SymfonySupport.php)
  #
  App\Api\Services\Authentication\JWTTokenRefreshService:
    public: true
    arguments: [ "@gesdinet.jwtrefreshtoken" ]

  App\Project\CatrobatFile\CatrobatFileSanitizer:
    class: App\Project\CatrobatFile\CatrobatFileSanitizer
    public: true

  App\User\Notification\NotificationManager:
    class: App\User\Notification\NotificationManager
    public: true

  App\Project\Remix\RemixManager:
    class: App\Project\Remix\RemixManager
    public: true

  App\User\Achievements\AchievementManager:
    class: App\User\Achievements\AchievementManager
    public: true

  App\Project\Scratch\ScratchManager:
    class: App\Project\Scratch\ScratchManager
    public: true

  App\Studio\StudioManager:
    class: App\Studio\StudioManager
    public: true

  App\Storage\ScreenshotRepository:
    class: App\Storage\ScreenshotRepository
    public: true

  App\Project\CatrobatFile\ProgramFileRepository:
    class: App\Project\CatrobatFile\ProgramFileRepository
    public: true

  App\Project\CatrobatFile\ExtractedFileRepository:
    class: App\Project\CatrobatFile\ExtractedFileRepository
    public: true

  App\Storage\ImageRepository:
    class: App\Storage\ImageRepository
    public: true

  App\Project\Apk\ApkRepository:
    class: App\Project\Apk\ApkRepository
    public: true

  App\Project\CatrobatFile\CatrobatFileCompressor:
    class: App\Project\CatrobatFile\CatrobatFileCompressor
    public: true

  App\Security\TokenGenerator:
    class: App\Security\TokenGenerator
    public: true

  App\Project\CatrobatCode\Parser\CatrobatCodeParser:
    class: App\Project\CatrobatCode\Parser\CatrobatCodeParser
    public: true

  App\Utils\RequestHelper:
    class: App\Utils\RequestHelper
    public: true

  App\Utils\ElapsedTimeStringFormatter:
    class: App\Utils\ElapsedTimeStringFormatter
    public: true

  App\Project\Apk\JenkinsDispatcher:
    class: App\Project\Apk\JenkinsDispatcher
    arguments:
      - "%jenkins%"
    public: true

  # ======== Views ========
  catrobat.view.uploadexception:
    class: App\Api_deprecated\Listeners\UploadExceptionListener
    tags:
      - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

  App\Api_deprecated\Security\ApiTokenAuthenticator:
    class: App\Api_deprecated\Security\ApiTokenAuthenticator
    public: true

  App\Security\Authentication\WebView\WebviewAuthenticator:
    class: App\Security\Authentication\WebView\WebviewAuthenticator
    public: true

  App\Security\Authentication\WebView\WebviewJWTAuthenticator:
    class: App\Security\Authentication\WebView\WebviewJWTAuthenticator
    public: true

  App\Security\Authentication\CookieService:
    class: App\Security\Authentication\CookieService
    arguments:
      - '%env(JWT_TTL)%'
      - '%env(REFRESH_TOKEN_TTL)%'
    public: true

  App\Security\Authentication\JwtRefresh\RefreshTokenService:
    arguments:
      - '%env(REFRESH_TOKEN_TTL)%'
    public: true

  App\Api_deprecated\OAuth\OAuthService:
    class: App\Api_deprecated\OAuth\OAuthService
    public: true

  App\Project\Scratch\AsyncHttpClient:
    class: App\Project\Scratch\AsyncHttpClient
    arguments:
      - timeout: 8.0
      - max_number_of_total_requests: 12
      - max_number_of_concurrent_requests: 4
    public: true

  App\DB\Generator\MyUuidGenerator:
    class: App\DB\Generator\MyUuidGenerator
    public: true

  # =============== Stuff that needs different parameters/services based on the environment

  App\Project\CatrobatFile\CatrobatFileExtractor:
    class: App\Project\CatrobatFile\CatrobatFileExtractor
    arguments:
      - "%catrobat.file.extract.dir%"
      - "%catrobat.file.extract.path%"
    public: true


  # ====================================================================================================================
  #   Twig
  #
  App\Application\Twig\TwigExtension:
    class: App\Application\Twig\TwigExtension
    tags:
      - { name: twig.extension }


  # ====================================================================================================================
  #   Event Notifier / Subscriber
  #
  App\Project\EventListener\ProjectPostUpdateNotifier:
    tags:
      - { name: 'doctrine.orm.entity_listener', event: 'postUpdate', entity: 'App\DB\Entity\Project\Program' }

  App\User\EventListener\UserPostPersistNotifier:
    tags:
      - { name: 'doctrine.orm.entity_listener', event: 'postPersist', entity: 'App\DB\Entity\User\User' }

  App\User\EventListener\UserPostUpdateNotifier:
    tags:
      - { name: 'doctrine.orm.entity_listener', event: 'postUpdate', entity: 'App\DB\Entity\User\User' }

  App\Project\EventSubscriber\ProjectDownloadEventSubscriber:
    tags:
      - { name: kernel.event_subscriber }

  App\User\ResetPassword\PasswordResetRequestedSubscriber:
    tags:
      - { name: kernel.event_subscriber }

  # ====================================================================================================================
  #   Listeners:
  #
  catroweb.oauth_success_listener:
    class: App\Security\OAuth\OAuthSuccessListener

  App\Application\Framework\ExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }

  App\Security\Authentication\JwtRefresh\RefreshBearerCookieOnKernelResponse:
    tags:
      - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse, priority: 200 }

  App\Application\Locale\LocaleListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 100 }

  App\Application\Theme\ThemeRequestListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 10  }

  # ======== Upload CatrobatFile ========

  App\Project\CatrobatFile\NameValidator:
    class: App\Project\CatrobatFile\NameValidator
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent,
        method: onProgramBeforeInsert
      }

  App\Project\CatrobatFile\DescriptionValidator:
    class: App\Project\CatrobatFile\DescriptionValidator
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent ,
        method: onProgramBeforeInsert
      }

  App\Project\CatrobatFile\NotesAndCreditsValidator:
    class: App\Project\CatrobatFile\NotesAndCreditsValidator
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent ,
        method: onProgramBeforeInsert
      }

  App\Project\CatrobatFile\VersionValidator:
    class: App\Project\CatrobatFile\VersionValidator
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent ,
        method: onProgramBeforeInsert
      }

  App\Project\CatrobatFile\ProgramXmlHeaderValidator:
    class: App\Project\CatrobatFile\ProgramXmlHeaderValidator
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent ,
        method: onProgramBeforeInsert
      }

  # ======== Upload Modification ========

  App\Project\CatrobatFile\LicenseUpdater:
    class: App\Project\CatrobatFile\LicenseUpdater
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforeInsertEvent,
        method: onProgramBeforeInsert,
        priority: -1
      }

  App\Project\Remix\RemixUpdater:
    class: App\Project\Remix\RemixUpdater
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramAfterInsertEvent,
        method: onProgramAfterInsert
      }

  App\Project\CatrobatFile\ProgramFlavorListener:
    class: App\Project\CatrobatFile\ProgramFlavorListener
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforePersistEvent,
        method: onEvent
      }

  App\Project\Apk\ApkCleanupListener:
    class: App\Project\Apk\ApkCleanupListener
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforePersistEvent,
        method: handleEvent
      }

  App\Project\CatrobatFile\ProgramExtensionListener:
    class: App\Project\CatrobatFile\ProgramExtensionListener
    tags:
      - {
        name: kernel.event_listener,
        event: App\Project\Event\ProgramBeforePersistEvent,
        method: onEvent
      }

  # ======== Logging ========

  monolog.formatter.catrobat_custom_formatter:
    class: Monolog\Formatter\LineFormatter
    arguments:
      - "[%%datetime%%] %%channel%%.%%level_name%%: %%message%% %%context%%
      [Client IP: %%extra.client_ip%%, User Agent: %%extra.user_agent%%, Session User: %%extra.session_user%%]\n"
#    calls:
#      - [ includeStacktraces ]

  App\System\Log\LoggerProcessor:
    tags:
      - { name: monolog.processor }

  # ======== Mails ========

  App\System\Mail\MailerAdapter:
    class: App\System\Mail\MailerAdapter
    public: true

  # ======== Scratch ========
  App\Project\Scratch\ScratchProgramUpdater:
    class: App\Project\Scratch\ScratchProgramUpdater
    tags:
      - { name: kernel.event_listener, event: App\Project\Event\CheckScratchProgramEvent, method: onCheckScratchProgram }

  # ======== Entity ========

  App\Project\EventListener\FeaturedProgramImageListener:
    class: App\Project\EventListener\FeaturedProgramImageListener
    tags:
      - { name: doctrine.orm.entity_listener }

  App\Project\EventListener\ExampleProgramImageListener:
    class: App\Project\EventListener\ExampleProgramImageListener
    tags:
      - { name: doctrine.orm.entity_listener }

  # ======== Views ========
  catrobat.view.programlist:
    class: App\Api_deprecated\Listeners\ProgramListSerializer
    tags:
      - { name: kernel.event_listener, event: kernel.view, method: onKernelView }

  # ======== Versioning ========

  App\Application\Framework\VersionStrategy:
    class: App\Application\Framework\VersionStrategy
    arguments:
      - '%env(string:APP_VERSION)%'

  # ====================================================================================================================
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ====================================================================================================================

  # ====================================================================================================================
  #  Sonata Admin Blocks
  #

  # ===== Projects

  admin.block.projects.overview:
    class: App\Admin\Projects\ProjectsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Projects Overview", show_mosaic_button: false}
    arguments:
      - ~
      - App\DB\Entity\Project\Program
      - ~
    public: true

  admin.block.projects.approve:
    class: App\Admin\Projects\ApproveProjects\ApproveProjectsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Approve Projects" }
    arguments:
      - ~
      - App\DB\Entity\Project\Program
      - App\Admin\Projects\ApproveProjects\ApproveProjectsController
    public: true

  admin.block.projects.reported:
    class: App\Admin\Projects\ReportedProjects\ReportedProjectsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Reported Projects" }
    arguments:
      - ~
      - App\DB\Entity\Project\ProgramInappropriateReport
      - App\Admin\Projects\ReportedProjects\ReportedProjectsController
    public: true

  # ===== Comments

  admin.block.comments.overview:
    class: App\Admin\Comments\CommentsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Comments Overview", show_mosaic_button: false}
    arguments:
      - ~
      - App\DB\Entity\User\Comment\UserComment
      - ~
    public: true

  admin.block.comments.reported:
    class: App\Admin\Comments\ReportedComments\ReportedCommentsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Reported Comments" }
    arguments:
      - ~
      - App\DB\Entity\User\Comment\UserComment
      - App\Admin\Comments\ReportedComments\ReportedCommentsController
    public: true

  # ===== Special Projects

  admin.block.featured.program:
    class: App\Admin\SpecialProjects\FeaturedProgramAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Featured Projects" }
    arguments:
      - ~
      - App\DB\Entity\Project\Special\FeaturedProgram
      - ~
    public: true

  admin.block.example.program:
    class: App\Admin\SpecialProjects\ExampleProgramAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Example Projects" }
    arguments:
      - ~
      - App\DB\Entity\Project\Special\ExampleProgram
      - ~
    public: true

  # ===== Media Package

  admin.block.mediapackage.package:
    class: App\Admin\MediaPackage\MediaPackageAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Packages" }
    arguments:
      - ~
      - App\DB\Entity\MediaLibrary\MediaPackage
      - ~
    public: true

  admin.block.mediapackage.category:
    class: App\Admin\MediaPackage\MediaPackageCategoriesAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Categories" }
    arguments:
      - ~
      - App\DB\Entity\MediaLibrary\MediaPackageCategory
      - App\Admin\MediaPackage\MediaPackageCategoryController
    public: true

  admin.block.mediapackage.file:
    class: App\Admin\MediaPackage\MediaPackageFileAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Files" }
    arguments:
      - ~
      - App\DB\Entity\MediaLibrary\MediaPackageFile
      - ~
    public: true

  # ===== Apk Generation

  admin.block.apk.pending:
    class: App\Admin\ApkGeneration\ApkPendingAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Pending" }
    arguments:
      - ~
      - App\DB\Entity\Project\Program
      - App\Admin\ApkGeneration\ApkController
    public: true

  admin.block.apk.list:
    class: App\Admin\ApkGeneration\ApkReadyAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Ready" }
    arguments:
      - ~
      - App\DB\Entity\Project\Program
      - App\Admin\ApkGeneration\ApkController
    public: true

  # ===== Users

  admin.block.users.overview:
    class: App\Admin\Users\UserAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: 'User Overview', show_mosaic_button: false }
    arguments:
      - ~
      - App\DB\Entity\User\User
      - ~

  admin.block.users.data_report:
    class: App\Admin\Users\UserDataReport\UserDataReportAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "User Data Report" }
    arguments:
      - ~
      - App\DB\Entity\User\User
      - App\Admin\Users\UserDataReport\UserDataReportController
    public: true

  admin.block.users.reported:
    class: App\Admin\Users\ReportedUsers\ReportedUsersAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Reported Users", pager_type: "simple" }
    arguments:
      - ~
      - App\DB\Entity\User\User
      - App\Admin\Users\ReportedUsers\ReportedUsersController
    public: true


  # ===== Survey

  admin.block.survey:
    class: App\Admin\Survey\AllSurveysAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "All Surveys", pager_type: "simple",
          icon: '<i class="fa fa-cogs"></i>' }
    arguments:
      - ~
      - App\DB\Entity\Survey
      - ~
    public: true

  # ===== DB Updater

  admin.block.special_updater:
    class: App\Admin\DB_Updater\SpecialUpdaterAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Special Updater", icon: '<i class="fa fa-cogs"></i>' }
    arguments:
      - ~
      - ~
      - App\Admin\DB_Updater\Controller\SpecialUpdaterAdminController
    public: true

  admin.block.cron_jobs:
    class: App\Admin\DB_Updater\CronJobsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Cron Jobs", icon: '<i class="fa fa-hourglass"></i>' }
    arguments:
      - ~
      - App\DB\Entity\System\CronJob
      - App\Admin\DB_Updater\Controller\CronJobsAdminController
    public: true

  admin.block.achievements:
    class: App\Admin\DB_Updater\AchievementsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Achievements" }
    arguments:
      - ~
      - App\DB\Entity\User\Achievements\Achievement
      - App\Admin\DB_Updater\Controller\AchievementsAdminController
    public: true


  admin.block.extensions:
    class: App\Admin\DB_Updater\ExtensionsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Extensions" }
    arguments:
      - ~
      - App\DB\Entity\Project\Extension
      - App\Admin\DB_Updater\Controller\ExtensionsAdminController
    public: true

  admin.block.tags:
    class: App\Admin\DB_Updater\TagsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Tags" }
    arguments:
      - ~
      - App\DB\Entity\Project\Tag
      - App\Admin\DB_Updater\Controller\TagsAdminController
    public: true

  # ===== Tools

  admin.block.tools.maintain:
    class: App\Admin\Tools\Maintenance\MaintainAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Maintain",
          icon: '<i class="fa fa-cogs"></i>' }
    arguments:
      - ~
      - ~
      - App\Admin\Tools\Maintenance\MaintainController
    public: true

  admin.block.tools.logs:
    class: App\Admin\Tools\Logs\LogsAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Logs",
          icon: '<i class="fa fa-cogs"></i>' }
    arguments:
      - ~
      - ~
      - App\Admin\Tools\Logs\LogsController
    public: true

  admin.block.tools.broadcast:
    class: App\Admin\Tools\BroadcastNotification\BroadcastNotificationAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Broadcast Notification" }
    arguments:
      - ~
      - App\DB\Entity\User\Notifications\BroadcastNotification
      - App\Admin\Tools\BroadcastNotification\BroadcastNotificationController
    public: true

  admin.block.tools.mail:
    class: App\Admin\Tools\SendMailToUser\SendMailToUserAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Send Mail to User" }
    arguments:
      - ~
      - ~
      - App\Admin\Tools\SendMailToUser\SendMailToUserController
    public: true

  # ====================================================================================================================
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ====================================================================================================================

  # ====================================================================================================================
  #  CAPI:
  #        We need to register the API server as handler for our open api generated APIs
  #
  OpenAPI\Server\Service\SerializerInterface: "@open_api_server.service.serializer"

  api.media-library:
    class: App\Api\MediaLibraryApi
    tags:
      - { name: "open_api_server.api", api: "mediaLibrary" }

  api.projects:
    class: App\Api\ProjectsApi
    tags:
      - { name: "open_api_server.api", api: "projects" }

  api.user:
    class: App\Api\UserApi
    tags:
      - { name: "open_api_server.api", api: "user" }

  api.authentication:
    class: App\Api\AuthenticationApi
    tags:
      - { name: "open_api_server.api", api: "authentication" }

  api.utility:
    class: App\Api\UtilityApi
    tags:
      - { name: "open_api_server.api", api: "utility" }

  api.search:
    class: App\Api\SearchApi
    tags:
      - { name: "open_api_server.api", api: "search" }

  api.notifications:
    class: App\Api\NotificationsApi
    tags:
      - { name: "open_api_server.api", api: "notifications" }

  App\Api\Services\OverwriteController:
    public: true

  App\Api\ProjectsApi:
    public: true

  #=====================================================================================================================
  # HWIOAUTH
  #=====================================================================================================================
  my.oauth_aware.user_provider.service:
    class: App\Security\OAuth\FOSUBUserProviderAdapter
    arguments:
      - '@App\User\UserManager'
      - {google: google_id, facebook: facebook_id, apple: apple_id}

  App\Translation\ItranslateApi:
    class: App\Translation\ItranslateApi
    arguments:
      - '@eight_points_guzzle.client.itranslate'

  App\Translation\GoogleTranslateApi:
    class: App\Translation\GoogleTranslateApi
    arguments:
      $client: '@Google\Cloud\Translate\V2\TranslateClient'
      $short_text_length: 10

  Google\Cloud\Translate\V2\TranslateClient:

  App\Translation\TranslationDelegate:
    class: App\Translation\TranslationDelegate
    arguments:
      $apis:
        - '@App\Translation\ItranslateApi'
        - '@App\Translation\GoogleTranslateApi'

  App\Translation\MachineTranslationListener:
    class: App\Translation\MachineTranslationListener
    tags:
      - { name: kernel.event_listener, event: kernel.terminate, method: onTerminateEvent }

  admin.block.statistics.project_machine_translation:
    class: App\Admin\Statistics\Translation\ProjectMachineTranslationAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Project Machine Translation" }
    arguments:
      - ~
      - App\DB\Entity\Translation\ProjectMachineTranslation
      - App\Admin\Statistics\Translation\Controller\ProjectMachineTranslationAdminController
    public: true

  admin.block.statistics.project_custom_translation:
    class: App\Admin\Statistics\Translation\ProjectCustomTranslationAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Project Custom Translation" }
    arguments:
      - ~
      - App\DB\Entity\Translation\ProjectCustomTranslation
      - ~
    public: true

  admin.block.statistics.comment_machine_translation:
    class: App\Admin\Statistics\Translation\CommentMachineTranslationAdmin
    tags:
      - { name: sonata.admin, manager_type: orm, label: "Comment Machine Translation" }
    arguments:
      - ~
      - App\DB\Entity\Translation\CommentMachineTranslation
      - App\Admin\Statistics\Translation\Controller\CommentMachineTranslationAdminController
    public: true
